<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KeepCoding</name>
    </assembly>
    <members>
        <member name="T:KeepCoding.RoutineBase">
            <summary>
            Abstract class for the <see cref="T:KeepCoding.Routine"/> datatype, since the different overloads are similar to each other. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.RoutineBase.#ctor(UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="P:KeepCoding.RoutineBase.Item(System.Int32)">
            <summary>
            Indexes into <see cref="P:KeepCoding.RoutineBase.Coroutines"/>.
            </summary>
            <param name="index">The index to index into <see cref="P:KeepCoding.RoutineBase.Coroutines"/>.</param>
            <returns>The <see cref="T:UnityEngine.Coroutine"/> from <see cref="P:KeepCoding.RoutineBase.Coroutines"/>.</returns>
        </member>
        <member name="P:KeepCoding.RoutineBase.IsRunning">
            <value>
            Determines whether it is currently running any coroutines.
            </value>
        </member>
        <member name="P:KeepCoding.RoutineBase.Count">
            <value>
            The amount of coroutines stored.
            </value>
        </member>
        <member name="P:KeepCoding.RoutineBase.Coroutines">
            <value>
            The list of all coroutines currently running.
            </value>
        </member>
        <member name="M:KeepCoding.RoutineBase.Stop">
            <summary>
            Stops the first coroutine that was called, and removes it from the list of coroutines.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCoding.RoutineBase.StopAll">
            <summary>
            Stops all instances of the coroutine, and clears the list of coroutines.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
        </member>
        <member name="M:KeepCoding.RoutineBase.GetEnumerator">
            <summary>
            Gets the enumerator of the <see cref="T:KeepCoding.Routine"/>, using <see cref="P:KeepCoding.RoutineBase.Coroutines"/>.
            </summary>
            <returns>The list of <see cref="P:KeepCoding.RoutineBase.Coroutines"/> in this <see cref="T:KeepCoding.Routine"/>.</returns>
        </member>
        <member name="T:KeepCoding.TupleBase">
            <summary>
            An abstract type meant for the tuple data type for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.TupleBase.Item(System.Byte)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <param name="index">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCoding.TupleBase.IsEmpty">
            <value>
            Determines if the tuple data type is empty.
            </value>
        </member>
        <member name="P:KeepCoding.TupleBase.Length">
            <value>
            Gets the length of the tuple, describing the amount of elements there are.
            </value>
        </member>
        <member name="P:KeepCoding.TupleBase.UpperBound">
            <value>
            Gets the upper bound of the tuple, which is the last index.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:KeepCoding.TupleBase.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="M:KeepCoding.TupleBase.GetEnumerator">
            <summary>
            Gets the enumerator of the tuple, using <see cref="P:KeepCoding.TupleBase.ToArray"/>.
            </summary>
            <returns>All of the items in tuple.</returns>
        </member>
        <member name="T:KeepCoding.WorkBase">
            <summary>
            Abstract class for the <see cref="T:KeepCoding.Work"/> datatype, since the different overloads are similar to each other. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.WorkBase.IsRunning">
            <value>
            Determines whether any thread in this class is running.
            </value>
        </member>
        <member name="P:KeepCoding.WorkBase.AllowSimultaneousActive">
            <value>
            Determines whether it should skip on starting a thread if it doesn't allow multiple.
            </value>
        </member>
        <member name="P:KeepCoding.WorkBase.ThreadsActive">
            <value>
            Counts the number of threads currently active within this class, and all of its overloads.
            </value>
        </member>
        <member name="P:KeepCoding.WorkBase.Thread">
            <value>
            The thread of the class.
            </value>
        </member>
        <member name="M:KeepCoding.WorkBase.Stop">
            <summary>
            Interrupts the thread.
            </summary>
        </member>
        <member name="M:KeepCoding.WorkBase.WaitForOtherThreads">
            <summary>
            Waits until it is allowed to run a thread.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> until <see cref="P:KeepCoding.WorkBase.ThreadsActive"/> is strictly less than <see cref="F:KeepCoding.WorkBase._maximumThreadsActive"/>.</returns>
        </member>
        <member name="M:KeepCoding.WorkBase.WaitForOwnThread">
            <summary>
            Waits until its own thread is no longer running..
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> until <see cref="P:KeepCoding.WorkBase.IsRunning"/> is no longer true.</returns>
        </member>
        <member name="T:KeepCoding.TPScriptEditor">
            <summary>
            Custom inspector for <see cref="T:KeepCoding.TPScript`1"/>. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.TPScriptEditor.OnInspectorGUI">
            <summary>
            Creates the force solve buttons.
            </summary>
        </member>
        <member name="T:KeepCoding.ConstructorArgumentException">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.ConstructorArgumentException.#ctor">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
        </member>
        <member name="M:KeepCoding.ConstructorArgumentException.#ctor(System.String)">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.ConstructorArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the constructor throws an exception due to a bad argument.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.EmptyIteratorException">
            <summary>
            An exception thrown when the iterator is empty. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.EmptyIteratorException.#ctor">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
        </member>
        <member name="M:KeepCoding.EmptyIteratorException.#ctor(System.String)">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.EmptyIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the iterator is empty.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.NegativeNumberException">
            <summary>
            An exception thrown when the number is unexpectedly negative. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.NegativeNumberException.#ctor">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
        </member>
        <member name="M:KeepCoding.NegativeNumberException.#ctor(System.String)">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.NegativeNumberException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the number is unexpectedly negative.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.NullIteratorException">
            <summary>
            An exception thrown when the iterator is null. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.NullIteratorException.#ctor">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
        </member>
        <member name="M:KeepCoding.NullIteratorException.#ctor(System.String)">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.NullIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown when the iterator is null.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.UnrecognizedTypeException">
            <summary>
            An exception thrown for when the type isn't handled. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.UnrecognizedTypeException.#ctor">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCoding.UnrecognizedTypeException.#ctor(System.String)">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.UnrecognizedTypeException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.UnrecognizedValueException">
            <summary>
            An exception thrown for when the value isn't handled. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.UnrecognizedValueException.#ctor">
            <summary>
            An exception thrown for when the type isn't handled.
            </summary>
        </member>
        <member name="M:KeepCoding.UnrecognizedValueException.#ctor(System.String)">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.UnrecognizedValueException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the value isn't handled.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.WrongDatatypeException">
            <summary>
            An exception thrown for when the wrong datatype is used. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.WrongDatatypeException.#ctor">
            <summary>
            An exception thrown for when the wrong datatype is used.
            </summary>
        </member>
        <member name="M:KeepCoding.WrongDatatypeException.#ctor(System.String)">
            <summary>
            An exception thrown for when the wrong datatype is used.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:KeepCoding.WrongDatatypeException.#ctor(System.String,System.Exception)">
            <summary>
            An exception thrown for when the wrong datatype is used.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">An <see cref="T:System.Exception"/> within this exception.</param>
        </member>
        <member name="T:KeepCoding.ArrayHelper">
            <summary>
            Extension methods surrounding <see cref="T:System.Array"/> static methods to make code a bit shorter. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.ArrayHelper.AsReadOnly``1(``0[])">
            <summary>
            Returns a read-only wrapper for the specified array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.asreadonly?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper.</param>
            <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> wrapper for the specified array.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch(System.Array,System.Object)">
            <summary>
            Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable"/> interface implemented by each element of the array and by the specified object.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional Array to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
            Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Object_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable"/> interface implemented by each element of the array and by the specified value.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.IComparer"/> interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch_System_Array_System_Int32_System_Int32_System_Object_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The sorted one-dimensional <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element..</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch``1(``0[],``0)">
            <summary>
            Searches an entire one-dimensional sorted array for a specific element, using the <see cref="T:System.IComparable`1"/> generic interface implemented by each element of the <see cref="T:System.Array"/> and by the specified object.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0_____0_"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches an entire one-dimensional sorted array for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0_____0_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable`1"/> implementation of each element.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the <see cref="T:System.IComparable`1"/> generic interface implemented by each element of the <see cref="T:System.Array"/> and by the specified value.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches a range of elements in a one-dimensional sorted array for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.binarysearch?view=net-5.0#System_Array_BinarySearch__1___0___System_Int32_System_Int32___0_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable`1"/> implementation of each element.</param>
            <returns>The index of the specified <paramref name="value"/> in the specified <paramref name="array"/>, if <paramref name="value"/> is found; otherwise, a negative number. If <paramref name="value"/> is not found and <paramref name="value"/> is less than one or more elements in <paramref name="array"/>, the negative number returned is the bitwise complement of the index of the first element that is larger than <paramref name="value"/>. If <paramref name="value"/> is not found and <paramref name="value"/> is greater than all elements in <paramref name="array"/>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <paramref name="array"/>, the return <paramref name="value"/> can be incorrect and a negative number could be returned, even if <paramref name="value"/> is present in <paramref name="array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            Sets a range of elements in an array to the default value of each element type.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.clear?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="array">The array whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. Guarantees that all changes are undone if the copy does not succeed completely.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.constrainedcopy?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray"/> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>
            Converts an array of one type to an array of another type.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.convertall?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2"/> that converts each element from one type to another type.</param>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Int64_System_Array_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationIndex"/> at which storing begins.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the specified source index and pastes them to another <see cref="T:System.Array"/> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Int32_System_Array_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray"/> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationIndex"/> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            Copies a range of elements from an Array starting at the first element and pastes them into another Array starting at the first element. The length is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Array_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            Copies a range of elements from an <see cref="T:System.Array"/> starting at the first element and pastes them into another <see cref="T:System.Array"/> starting at the first element. The length is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copy?view=net-5.0#System_Array_Copy_System_Array_System_Array_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArrayTypeMismatchException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="sourceArray">The <see cref="T:System.Array"/> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array"/> that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <returns><paramref name="destinationArray"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CreateInstance(System.Type,System.Int32)">
            <summary>
            Creates a one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and length, with zero-based indexing.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length">The size of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new one-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CreateInstance(System.Type,System.Int32[])">
            <summary>
            Creates a multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
            </summary>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="lengths">An array of 32-bit integers that represent the size of each dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CreateInstance(System.Type,System.Int64[])">
            <summary>
            Creates a multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int64___"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="lengths">An array of 64-bit integers that represent the size of each dimension of the <see cref="T:System.Array"/> to create. Each integer in the array must be between zero and <see cref="F:System.Int32.MaxValue"/>, inclusive.</param>
            <returns>A new multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CreateInstance(System.Type,System.Int32,System.Int32)">
            <summary>
            Creates a two-dimensional Array of the specified Type and dimension lengths, with zero-based indexing.
            </summary>
            <remarks><see href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length1">The size of the first dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="length2">The size of the second dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new two-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CreateInstance(System.Type,System.Int32[],System.Int32[])">
            <summary>
            Creates a multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with the specified lower bounds.
            </summary>
            <remarks><see href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32___System_Int32___"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="lengths">A one-dimensional array that contains the size of each dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="lowerBounds">A one-dimensional array that contains the lower bound (starting index) of each dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new multidimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length and lower bound for each dimension.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a three-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> and dimension lengths, with zero-based indexing.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.createinstance?view=net-5.0#System_Array_CreateInstance_System_Type_System_Int32_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="elementType">The <see cref="T:System.Type"/> of the <see cref="T:System.Array"/> to create.</param>
            <param name="length1">The size of the first dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="length2">The size of the second dimension of the <see cref="T:System.Array"/> to create.</param>
            <param name="length3">The size of the third dimension of the <see cref="T:System.Array"/> to create.</param>
            <returns>A new three-dimensional <see cref="T:System.Array"/> of the specified <see cref="T:System.Type"/> with the specified length for each dimension, using zero-based indexing.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Exists``1(``0[],System.Predicate{``0})">
            <summary>
            Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.exists?view=net-5.0"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the elements to search for.</param>
            <returns><c>true</c> if <paramref name="array"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.find?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="match">The predicate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findall?view=net-5.0"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the elements to search for.</param>
            <returns>An <see cref="T:System.Array"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array"/> that extends from the specified index to the last element.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findindex?view=net-5.0#System_Array_FindIndex__1___0___System_Int32_System_Predicate___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array"/> that starts at the specified index and contains the specified number of elements.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/dotnet/api/system.array.findindex?view=net-5.0#System_Array_FindIndex__1___0___System_Int32_System_Int32_System_Predicate___0__</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <see cref="T:System.Predicate`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindLast``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findlast?view=net-5.0"/></remarks>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array"/>.
            </summary>
            <remarks><see href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=net-5.0#System_Array_FindLastIndex__1___0___System_Predicate___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array"/> that extends from the specified index to the last element.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=net-5.0#System_Array_FindLastIndex__1___0___System_Int32_System_Predicate___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array"/> that starts at the specified index and contains the specified number of elements.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/dotnet/api/system.array.findlastindex?view=net-5.0#System_Array_FindLastIndex__1___0___System_Int32_System_Int32_System_Predicate___0__</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1"/> that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <see cref="T:System.Predicate`1"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.ForEach``1(``0[],System.Action{``0})">
            <summary>
            Performs the specified action on each element of the specified array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.foreach?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> on whose elements the action is to be performed.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to perform on each element of <paramref name="array"/>.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.IndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The index of the first occurrence of <paramref name="value"/> in <paramref name="array"/>, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the first occurrence of <paramref name="value"/>, if it's found, within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the first occurrence of <paramref name="value"/>, if it's found in the <paramref name="array"/> from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + <paramref name="count"/> - 1; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.IndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> in the entire <paramref name="array"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.IndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The zero-based index of the first occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.LastIndexOf(System.Array,System.Object)">
            <summary>
            Searches for the specified object and returns the index of its last occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The index of the last occurrence of <paramref name="value"/> in <paramref name="array"/>, if found; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its last occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The index of the last occurrence of <paramref name="value"/>, if it's found, within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs last occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf_System_Array_System_Object_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements to search.</param>
            <returns>The index of the last occurrence of <paramref name="value"/>, if it's found in the <paramref name="array"/> from index <paramref name="startIndex"/> to <paramref name="startIndex"/> + <paramref name="count"/> - 1; otherwise, the lower bound of the array minus 1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its last occurrence. The range extends from a specified index for a specified number of elements.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that starts at <paramref name="startIndex"/> and contains the number of elements specified in <paramref name="count"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.LastIndexOf``1(``0[],``0)">
            <summary>
            Searches for the specified object and returns the index of its last occurrence in a one-dimensional array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="value"/> in the entire <paramref name="array"/>, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>
            Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its last occurrence. The range extends from a specified index to the end of the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.indexof?view=net-5.0#System_Array_IndexOf__1___0_____0_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to search.</param>
            <param name="value">The object to locate in <paramref name="array"/>.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <returns>The zero-based index of the last occurrence of <paramref name="value"/> within the range of elements in <paramref name="array"/> that extends from <paramref name="startIndex"/> to the last element, if found; otherwise, -1.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Resize``1(``0[],System.Int32)">
            <summary>
            Changes the number of elements of a one-dimensional array to the specified new size.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.resize?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based array to resize, or <c>null</c> to create a new array with the specified size.</param>
            <param name="newSize">The size of the new array.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
            Reverses the sequence of a subset of the elements in the one-dimensional <see cref="T:System.Array"/>.
            </summary>
            <remarks>https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse_System_Array_System_Int32_System_Int32_</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Reverse(System.Array)">
            <summary>
            Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Reverse``1(``0[])">
            <summary>
            Reverses the sequence of the elements in the one-dimensional generic array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse__1___0___"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">The one-dimensional array of elements to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Reverse``1(``0[],System.Int32,System.Int32)">
            <summary>
            Reverses the sequence of a subset of the elements in the one-dimensional generic array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.reverse?view=net-5.0#System_Array_Reverse__1___0___System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <typeparam name="T">The type of the elements in <paramref name="array"/>.</typeparam>
            <param name="array">The one-dimensional array of elements to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Int32_System_Int32_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
            Sorts the elements in a range of elements in a one-dimensional <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
            Sorts a range of elements in a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each key.
            </summary>
            <remarks><seealso href=""/>https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_System_Int32_System_Int32_</remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            Sorts the elements in a one-dimensional <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional array to sort.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
            Sorts a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.IComparer"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_System_Collections_IComparer_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array,System.Array)">
            <summary>
            Sorts a pair of one-dimensional <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each key.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="keys">The one-dimensional <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional <see cref="T:System.Array"/> that contains the items that correspond to each of the keys in the <paramref name="keys"/><see cref="T:System.Array"/> or <c>null</c> to sort only the <paramref name="keys"/><see cref="T:System.Array"/>.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort(System.Array)">
            <summary>
            Sorts the elements in an entire one-dimensional <see cref="T:System.Array"/> using the <see cref="T:System.IComparable"/> implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``1(``0[])">
            <summary>
            Sorts the elements in an entire <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort_System_Array_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based Array to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements in an <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array"/> to sort.</param>
            <param name="comparer">The <see cref="T:System.IComparable`1"/> generic interface implementation to use when comparing elements, or <c>null</c> to use the <see cref="T:System.IComparable`1"/> generic interface implementation of each element.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``1(``0[],System.Comparison{``0})">
            <summary>
            Sorts the elements in an <see cref="T:System.Array"/> using the specified <see cref="T:System.Comparison`1"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Comparison___0__"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort.</param>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>
            Sorts the elements in a range of elements in an <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each element of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements in a range of elements in an <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``2(``0[],``1[])">
            <summary>
            Sorts a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each key.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__1___0___System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__2___0_____1___System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <param name="comparer">The <see cref="T:System.IComparable`1"/> generic interface implementation to use when comparing elements, or <c>null</c> to use the <see cref="T:System.IComparable`1"/> generic interface implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``2(``0[],``1[],System.Int32,System.Int32)">
            <summary>
            Sorts a range of elements in a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the <see cref="T:System.IComparable`1"/> generic interface implementation of each key.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__2___0_____1___System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts a range of elements in a pair of <see cref="T:System.Array"/> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <see cref="T:System.Array"/> using the specified <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.sort?view=net-5.0#System_Array_Sort__2___0_____1___System_Int32_System_Int32_System_Collections_Generic_IComparer___0__"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.RankException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
            <typeparam name="TKey">The type of the elements of the key array.</typeparam>
            <typeparam name="TValue">The type of the elements of the items array.</typeparam>
            <param name="keys">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the keys to sort.</param>
            <param name="items">The one-dimensional, zero-based <see cref="T:System.Array"/> that contains the items that correspond to the keys in <paramref name="keys"/>, or <c>null</c> to sort only <paramref name="keys"/>.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The implementation to use when comparing elements or <c>null</c> to use the <see cref="T:System.IComparable"/> implementation of each element.</param>
            <returns><paramref name="keys"/> and <paramref name="items"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>
            Determines whether every element in the array matches the conditions defined by the specified predicate.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.trueforall?view=net-5.0"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array"/> to check against the conditions.</param>
            <param name="match">The predicate that defines the conditions to check against the elements.</param>
            <returns><c>true</c> if every element in <paramref name="array"/> matches the conditions defined by the specified predicate; otherwise, <c>false</c>. If there are no elements in the array, the return value is <c>true</c>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Clone(System.Array)">
            <summary>
            Creates a shallow copy of the <see cref="T:System.Array"/>
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.clone?view=net-5.0"/></remarks>
            <param name="this"><c>this</c></param>
            <returns>A shallow copy of the <paramref name="this"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CopyTo(System.Array,System.Array,System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copyto?view=net-5.0#System_Array_CopyTo_System_Array_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="this"><c>this</c></param>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="index">A 32-bit integer that represents the index in <paramref name="array"/> at which copying begins.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.CopyTo(System.Array,System.Array,System.Int64)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.copyto?view=net-5.0#System_Array_CopyTo_System_Array_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
            <param name="this"><c>this</c></param>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the current array.</param>
            <param name="index">A 64-bit integer that represents the index in <paramref name="array"/> at which copying begins.</param>
            <returns><paramref name="array"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.GetEnumerator(System.Array)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> for the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getenumerator?view=net-5.0"/></remarks>
            <param name="this"><c>this</c></param>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> for the Array.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.GetLength(System.Array,System.Int32)">
            <summary>
            Gets a 32-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getlength?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array"/> whose length needs to be determined.</param>
            <returns>A 32-bit integer that represents the number of elements in the specified dimension.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.GetLongLength(System.Array,System.Int32)">
            <summary>
            Gets a 64-bit integer that represents the number of elements in the specified dimension of the <see cref="T:System.Array"/>.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getlonglength?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the <see cref="T:System.Array"/> whose length needs to be determined.</param>
            <returns>A 64-bit integer that represents the number of elements in the specified dimension.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.GetLowerBound(System.Array,System.Int32)">
            <summary>
            Gets the index of the first element of the specified dimension in the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getlowerbound?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the array whose starting index needs to be determined.</param>
            <returns>The index of the first element of the specified dimension in the array.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.GetUpperBound(System.Array,System.Int32)">
            <summary>
            Gets the index of the last element of the specified dimension in the array.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getupperbound?view=net-5.0"/></remarks>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="dimension">A zero-based dimension of the array whose starting index needs to be determined.</param>
            <returns>The index of the first element of the specified dimension in the array.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int64,System.Int64,System.Int64)">
            <summary>
            Gets the value at the specified position in the three-dimensional <see cref="T:System.Array"/>. The indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified position in the three-dimensional <see cref="T:System.Array"/>. The indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the three-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.GetValue(System.Array,System.Int64,System.Int64)">
            <summary>
            Gets the value at the specified position in the two-dimensional <see cref="T:System.Array"/>. The indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified position in the two-dimensional <see cref="T:System.Array"/>. The indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the two-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int32)">
            <summary>
            Gets the value at the specified position in the one-dimensional <see cref="T:System.Array"/>. The indexes are specified as 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int64)">
            <summary>
            Gets the value at the specified position in the one-dimensional <see cref="T:System.Array"/>. The indexes are specified as 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="index">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to get.</param>
            <returns>The value at the specified position in the one-dimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int32[])">
            <summary>
            Gets the value at the specified position in the multidimensional <see cref="T:System.Array"/>. The indexes are specified as an array of 32-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int32___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the Array element to get.</param>
            <returns>The value at the specified position in the multidimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Get(System.Array,System.Int64[])">
            <summary>
            Gets the value at the specified position in the multidimensional <see cref="T:System.Array"/>. The indexes are specified as an array of 64-bit integers.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.getvalue?view=net-5.0#System_Array_GetValue_System_Int64___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the Array element to get.</param>
            <returns>The value at the specified position in the multidimensional <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Initialize(System.Array)">
            <summary>
            Initializes every element of the value-type <see cref="T:System.Array"/> by calling the parameterless constructor of the value type.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.initialize?view=net-5.0"/></remarks>
            <param name="this"><c>this</c></param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the one-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index">A 32-bit integer that represents the position of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int32[])">
            <summary>
            Sets a value to the element at the specified position in the multi-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="indices">A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the one-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index">A 64-bit integer that represents the position of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int64[])">
            <summary>
            Sets a value to the element at the specified position in the multi-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64___"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="indices">A one-dimensional array of 64-bit integers that represent the indexes specifying the position of the element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the two-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int64,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the two-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a value to the element at the specified position in the three-dimensional Array. The index is specified as a 32-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int32_System_Int32_System_Int32_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 32-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 32-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index3">A 32-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="M:KeepCoding.ArrayHelper.Set(System.Array,System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Sets a value to the element at the specified position in the three-dimensional Array. The index is specified as a 64-bit integer.
            </summary>
            <remarks><seealso href="https://docs.microsoft.com/en-us/dotnet/api/system.array.setvalue?view=net-5.0#System_Array_SetValue_System_Object_System_Int64_System_Int64_System_Int64_"/></remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <param name="this"><c>this</c></param>
            <param name="value">The new value for the specified element.</param>
            <param name="index1">A 64-bit integer that represents the first-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index2">A 64-bit integer that represents the second-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <param name="index3">A 64-bit integer that represents the third-dimension index of the <see cref="T:System.Array"/> element to set.</param>
            <returns><paramref name="this"/></returns>
        </member>
        <member name="T:KeepCoding.EventHelper">
            <summary>
            KMFramework extension methods that makes it easier to assign multiple events to a variable in one statement. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMBombInfo,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="bombInfo"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="bombInfo">The bomb info instance to assign events to.</param>
            <param name="onBombExploded">Called when the bomb explodes.</param>
            <param name="onBombSolved">Called when the bomb is defused.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMBombModule,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="bombModule"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="bombModule">The bomb instance to assign events to.</param>
            <param name="onActivate">Called when the lights turn on.</param>
            <param name="onPass">Called when the module is solved.</param>
            <param name="onStrike">Called when the module strikes.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMGameInfo,System.Action{KMGameInfo.State},System.Action{System.Boolean},System.Action{System.Boolean})">
            <summary>
            Assigns events specified into <paramref name="gameInfo"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="gameInfo">The game info instance to assign events to.</param>
            <param name="onStateChange">Called when the state of the game changes.</param>
            <param name="onAlarmClockChange">Called when the alarm clock changes state, and passes in whether it's on or off.</param>
            <param name="onLightsChange">Called when the lights change state, and passes in whether it's on or off.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMNeedyModule,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <paramref name="needyModule"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="needyModule">The needy instance to assign events to.</param>
            <param name="onActivate">Called when the lights turn on.</param>
            <param name="onNeedyActivation">Called when the needy activates.</param>
            <param name="onNeedyDeactivation">Called when the needy deactivates.</param>
            <param name="onPass">Called when the needy is solved.</param>
            <param name="onStrike">Called when the needy strikes.</param>
            <param name="onTimerExpired">Called when the timer runs out of time.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMSelectable,System.Nullable{System.Boolean},System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Action{System.Single},System.Action,System.Action,System.Action,System.Action{KMSelectable})">
            <summary>
            Assigns events specified into <paramref name="selectable"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="selectable">The KMSelectable array to add events to.</param>
            <param name="overrideReturn">True will make it act as a module/submodule, and false as a button. Null (default) will set it to true or false based on <see cref="M:KeepCoding.Helper.IsParent(KMSelectable)"/>. Note that in VR, <see cref="F:KMSelectable.OnHighlight"/> and <see cref="F:KMSelectable.OnHighlightEnded"/> are skipped out on.</param>
            <param name="onCancel">Called when player backs out of this selectable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off.</param>
            <param name="onInteract">Called when player interacts with the selctable. Return true will make it act as a module/submodule, and false as a button.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onInteractionPunch">Called when the interaction punch method is called.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="onUpdateChildren">Called when the selectable updates its children.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMSelectable[],System.Nullable{System.Boolean},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32,System.Single},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32},System.Action{System.Int32,KMSelectable})">
            <summary>
            Assigns events specified into <paramref name="selectable"/>. Reassigning them will replace their values. The number passed into each method represents the index that came from the array.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="selectable">The <see cref="T:KMSelectable"/> array to add events to.</param>
            <param name="overrideReturn">True will make it act as a module/submodule, and false as a button. Null (default) will set it to true or false based on <see cref="M:KeepCoding.Helper.IsParent(KMSelectable)"/>. Note that in VR, <see cref="F:KMSelectable.OnHighlight"/> and <see cref="F:KMSelectable.OnHighlightEnded"/> are skipped out on.</param>
            <param name="onCancel">Called when player backs out of this selectable.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off.</param>
            <param name="onInteract">Called when player interacts with the selctable.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onInteractionPunch">Called when the interaction punch method is called.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="onUpdateChildren">Called when the selectable updates its children.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Assign(KMSelectable[],System.Nullable{System.Boolean},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable,System.Single},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable},System.Action{KMSelectable,KMSelectable})">
            <summary>
            Assigns events specified into <paramref name="selectable"/>. Reassigning them will replace their values. The number passed into each method represents the index that came from the array.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <param name="selectable">The <see cref="T:KMSelectable"/> array to add events to.</param>
            <param name="overrideReturn">True will make it act as a module/submodule, and false as a button. Null (default) will set it to true or false based on <see cref="M:KeepCoding.Helper.IsParent(KMSelectable)"/>. Note that in VR, <see cref="F:KMSelectable.OnHighlight"/> and <see cref="F:KMSelectable.OnHighlightEnded"/> are skipped out on.</param>
            <param name="onCancel">Called when player backs out of this selectable.</param>
            <param name="onDefocus">Called when a different selectable becomes the focus, or the module has been backed out of.</param>
            <param name="onDeselect">Called when the selectable stops being the current selectable.</param>
            <param name="onFocus">Called when a module is focused, this is when it is interacted with from the bomb face level and its children can be selected.</param>
            <param name="onHighlight">Called when the highlight is turned on.</param>
            <param name="onHighlightEnded">Called when the highlight is turned off.</param>
            <param name="onInteract">Called when player interacts with the selctable.</param>
            <param name="onInteractEnded">Called when a player interacting with the selectable releases the mouse or controller button.</param>
            <param name="onInteractionPunch">Called when the interaction punch method is called.</param>
            <param name="onLeft">Called when the left controller stick is pulled while selected.</param>
            <param name="onRight">Called when the right controller stick is pulled while selected.</param>
            <param name="onSelect">Called whenever the selectable becomes the current selectable.</param>
            <param name="onUpdateChildren">Called when the selectable updates its children.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.StopSound(KMAudio.KMAudioRef[])">
            <summary>
            Stops all sounds for the entire <see cref="T:KMAudio.KMAudioRef"/> <see cref="T:System.Array"/>.
            </summary>
            <param name="audioRefs">The <see cref="T:KMAudio.KMAudioRef"/> <see cref="T:System.Array"/> to mute all sounds from, using <see cref="F:KMAudio.KMAudioRef.StopSound"/>.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.StopSound(KeepCoding.Sound[])">
            <summary>
            Stops all sounds for the entire <see cref="T:KeepCoding.Sound"/> <see cref="T:System.Array"/>.
            </summary>
            <param name="sounds">The <see cref="T:KeepCoding.Sound"/> <see cref="T:System.Array"/> to mute all sounds from, using <see cref="F:KMAudio.KMAudioRef.StopSound"/>.</param>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine(System.Action,System.Action[])">
            <summary>
            Combines actions together, only if these actions are not <see langword="null"/>.
            </summary>
            <param name="self">The action to modify.</param>
            <param name="others">The actions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``1(System.Action{``0},System.Action{``0}[])">
            <summary>
            Combines actions together, only if these actions are not <see langword="null"/>.
            </summary>
            <param name="self">The action to modify.</param>
            <param name="others">The actions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``2(System.Action{``0,``1},System.Action{``0,``1}[])">
            <summary>
            Combines actions together, only if these actions are not <see langword="null"/>.
            </summary>
            <param name="self">The action to modify.</param>
            <param name="others">The actions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``3(System.Action{``0,``1,``2},System.Action{``0,``1,``2}[])">
            <summary>
            Combines actions together, only if these actions are not <see langword="null"/>.
            </summary>
            <param name="self">The action to modify.</param>
            <param name="others">The actions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``4(System.Action{``0,``1,``2,``3},System.Action{``0,``1,``2,``3}[])">
            <summary>
            Combines actions together, only if these actions are not <see langword="null"/>.
            </summary>
            <param name="self">The action to modify.</param>
            <param name="others">The actions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Set``1(System.Delegate,``0@)">
            <summary>
            Adds a <see cref="T:System.Delegate"/> onto the referenced variable.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type of the <paramref name="mutator"/> and <see cref="T:System.Delegate"/> casting.</typeparam>
            <param name="dele">The <see cref="T:System.Delegate"/> to add.</param>
            <param name="mutator">The variable that transmutates and adds <paramref name="dele"/> onto itself.</param>
            <returns><paramref name="mutator"/> with the value <paramref name="dele"/>, or itself if <paramref name="dele"/> is null.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Cast``1(System.Delegate)">
            <summary>
            Casts a <see cref="T:System.Delegate"/> onto the type <typeparamref name="T"/>.
            </summary>
            <remarks>
            Both types must have the same parameter and return types, and the <paramref name="dele"/> argument cannot have its <see cref="P:System.Delegate.Target"/> or <see cref="P:System.Delegate.Method"/> be null.
            </remarks>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <typeparam name="T">The type to cast the delegate into.</typeparam>
            <param name="dele">The delegate to cast.</param>
            <returns><paramref name="dele"/> as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.CreateDelegate``1(System.Delegate)">
            <summary>
            Creates a delegate of the specified type.
            </summary>
            <typeparam name="T">The type of delegate to create.</typeparam>
            <param name="dele">The delegate to reference from.</param>
            <returns>A delegate of type <typeparamref name="T"/> using <paramref name="dele"/>'s target and method.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``1(System.Func{``0},System.Func{``0}[])">
            <summary>
            Combines actions together, only if these functions are not <see langword="null"/>.
            </summary>
            <param name="self">The function to modify.</param>
            <param name="others">The functions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``2(System.Func{``0,``1},System.Func{``0,``1}[])">
            <summary>
            Combines actions together, only if these functions are not <see langword="null"/>.
            </summary>
            <param name="self">The function to modify.</param>
            <param name="others">The functions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``3(System.Func{``0,``1,``2},System.Func{``0,``1,``2}[])">
            <summary>
            Combines actions together, only if these functions are not <see langword="null"/>.
            </summary>
            <param name="self">The function to modify.</param>
            <param name="others">The functions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``4(System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3}[])">
            <summary>
            Combines actions together, only if these functions are not <see langword="null"/>.
            </summary>
            <param name="self">The function to modify.</param>
            <param name="others">The functions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="M:KeepCoding.EventHelper.Combine``5(System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4}[])">
            <summary>
            Combines actions together, only if these functions are not <see langword="null"/>.
            </summary>
            <param name="self">The function to modify.</param>
            <param name="others">The functions to combine with <paramref name="self"/>.</param>
            <returns><paramref name="self"/> with <paramref name="others"/> appended.</returns>
        </member>
        <member name="T:KeepCoding.Helper">
            <summary>
            General extension class covering both KMFramework and native datatypes. Written by Emik.
            </summary>
        </member>
        <member name="F:KeepCoding.Helper.Flags">
            <summary>
            Contains the most commonly used flags, use this as a "catch-all" expression.
            </summary>
        </member>
        <member name="F:KeepCoding.Helper.Alphanumeric">
            <summary>
            The entire alphanumeric series, also known as base-62. From 0-9, A-Z, a-z.
            </summary>
        </member>
        <member name="F:KeepCoding.Helper.Decimal">
            <summary>
            The entire decimal series, also known as base-10. From 0-9.
            </summary>
        </member>
        <member name="F:KeepCoding.Helper.Binary">
            <summary>
            The entire binary series, also known as base-2. From 0-1.
            </summary>
        </member>
        <member name="M:KeepCoding.Helper.HasComponent``1(UnityEngine.GameObject,``0@)">
            <summary>
            Determines if the current game object has a component of a specific type.
            </summary>
            <remarks>
            This uses <see cref="M:UnityEngine.GameObject.GetComponent``1"/>, meaning that the component must be part of the same game object for this to return true.
            </remarks>
            <typeparam name="T">The type of component to find.</typeparam>
            <param name="obj">The game object to search with.</param>
            <param name="component">The variable to store the component in.</param>
            <returns>True if a component has been found of type <typeparamref name="T"/> from <paramref name="obj"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return true.</param>
            <param name="max">The maximum value required to return true.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsBetween(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether the number is equal or in-between 2 values.
            </summary>
            <param name="comparison">The number to use as comparison.</param>
            <param name="min">The minimum value required to return true.</param>
            <param name="max">The maximum value required to return true.</param>
            <returns>True if <paramref name="comparison"/> is more than or equal <paramref name="min"/> and less than or equal <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsIndexNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines if the index is pointing to null in any way.
            </summary>
            <param name="source">The array to index with.</param>
            <param name="index">The index.</param>
            <returns>True if <paramref name="source"/> is null, if <paramref name="index"/> is out of range, or if the element is null.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsIterator``1(``0)">
            <summary>
            Determines if the item is an iterator type.
            </summary>
            <param name="item">The item to check the type for.</param>
            <returns><paramref name="item"/> is either <see cref="T:System.String"/>, <see cref="T:System.Collections.IEnumerable"/>, or <see cref="T:System.Collections.IEnumerator"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsNullOrEmpty(System.String)">
            <summary>
            Determines if the string is null or empty.
            </summary>
            <param name="str">The string to check for.</param>
            <returns>True if <paramref name="str"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or empty.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for.</param>
            <returns>True if <paramref name="source"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsNullOrEmpty``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Determines if the <see cref="T:System.Collections.Generic.IEnumerator`1"/> is null or empty.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for.</param>
            <returns>True if <paramref name="source"/> is equal to null, or empty.</returns>
        </member>
        <member name="M:KeepCoding.Helper.IsParent(KMSelectable)">
            <summary>
            Determines if the <see cref="T:KMSelectable"/> is a parent of another <see cref="T:KMSelectable"/>.
            </summary>
            <param name="kmSelectable">This is required to check the children field.</param>
            <returns>True if <see cref="F:KMSelectable.Children"/> is empty.</returns>
        </member>
        <member name="M:KeepCoding.Helper.RandomBoolean(System.Single)">
            <summary>
            Generates a random boolean.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="weighting">The odds of the boolean being true.</param>
            <returns>A random boolean, with probability based off of <paramref name="weighting"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.RandomBooleans(System.Int32,System.Single)">
            <summary>
            Creates an <see cref="T:System.Array"/> of random boolean values.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="length">The length of the array.</param>
            <param name="weighting">The odds of the boolean being true.</param>
            <returns>An array of random booleans of length <paramref name="length"/>, with probability based off of <paramref name="weighting"/>.</returns>
            <returns></returns>
        </member>
        <member name="M:KeepCoding.Helper.ToNumber(System.Char)">
            <summary>
            Converts a character to a number.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToLower(System.Char)">
            <summary>
            Converts a character to lowercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as lowercase.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToUpper(System.Char)">
            <summary>
            Converts a character to uppercase.
            </summary>
            <param name="source">The character to convert.</param>
            <returns><paramref name="source"/> as uppercase.</returns>
        </member>
        <member name="M:KeepCoding.Helper.DigitalRoot(System.Int32)">
            <summary>
            Gets the digital root of the number, which is obtained by repeatedly getting the sum of all digits until 1 digit remains.
            </summary>
            <param name="number">The number to get the digital root of.</param>
            <returns>The digital root of <paramref name="number"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetUpperBound(System.String)">
            <summary>
            Returns the last index of the string.
            </summary>
            <param name="str">The string to check length for.</param>
            <returns><see cref="P:System.String.Length"/> - 1</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetUpperBound``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last index of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check length for.</param>
            <returns><paramref name="source"/>.Count() - 1</returns>
        </member>
        <member name="M:KeepCoding.Helper.LengthOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the length of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, or if null, the default value 0.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check its length.</param>
            <returns><paramref name="source"/>'s length, or 0.</returns>
        </member>
        <member name="M:KeepCoding.Helper.MemberCount``1">
            <summary>
            Counts the number of members in an enum.
            </summary>
            <typeparam name="T">The enum to check the length for.</typeparam>
            <returns>The number of members in <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Modulo(System.Int32,System.Int32)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="number">The left-hand side operator</param>
            <param name="modulo">The right-hand side operator.</param>
            <returns><paramref name="number"/> mod <paramref name="modulo"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.SetOrReplace``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0,System.Func{System.Int32,System.Int32})">
            <summary>
            Sets or replaces the value of a dictionary with a given function.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">Type of the key of the dictionary.</typeparam>
            <param name="source">Dictionary to operate on.</param>
            <param name="key">Key at which the list is located in the dictionary.</param>
            <param name="func">The function that returns the new value.</param>
            <returns>The new value at the specified key.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Ranges(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a random set of integers.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="length">The length of the array.</param>
            <param name="min">The minimum value for each index. (inclusive)</param>
            <param name="max">The maximum value for each index. (exclusive)</param>
            <returns>Random integer array of length <paramref name="length"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToNumbers``1(``0[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Parses each element of an array into a number. If it succeeds it returns the integer array, if it fails then it returns null.
            </summary>
            <param name="ts">The array to convert to an integer.</param>
            <param name="min">The minimum acceptable value of any given index. (inclusive)</param>
            <param name="max">The maximum acceptable value of any given index. (inclusive)</param>
            <param name="minLength">The minimum acceptable length of the array. (inclusive)</param>
            <param name="maxLength">The maximum acceptable length of the array. (inclusive)</param>
            <returns>The array as integers, or null if it fails.</returns>
        </member>
        <member name="M:KeepCoding.Helper.BaseToLong(System.String,System.Int32)">
            <summary>
            Converts any base number to any base-10.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base it currently is.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.BaseToLong(System.String,System.String)">
            <summary>
            Converts any base number to base-10.
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters for the conversion from the base number, use <see cref="F:KeepCoding.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCoding.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCoding.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Modulo(System.Single,System.Single)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="number">The left-hand side operator</param>
            <param name="modulo">The right-hand side operator.</param>
            <returns><paramref name="number"/> mod <paramref name="modulo"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Ranges(System.Int32,System.Single,System.Single)">
            <summary>
            Generates a random set of floats.
            </summary>
            <remarks>
            As this uses <see cref="T:UnityEngine.Random"/>, you may not use this in a constructor. Use it in <c>Awake()</c> or <c>Start()</c> in that case.
            </remarks>
            <param name="length">The length of the array.</param>
            <param name="min">The minimum value for each index. (inclusive)</param>
            <param name="max">The maximum value for each index. (inclusive)</param>
            <returns>Random float array of length <paramref name="length"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Base(System.String,System.String,System.String)">
            <summary>
            Converts any base number to any base.
            </summary>a
            <param name="value">The value to convert.</param>
            <param name="fromBaseChars">All of the base characters for the conversion from the base number, use <see cref="F:KeepCoding.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCoding.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCoding.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <param name="toBaseChars">All of the base characters for the conversion to the base number, use <see cref="F:KeepCoding.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCoding.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCoding.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Base(System.String,System.Int32,System.Int32)">
            <summary>
            Converts any base number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="fromBaseNumber">Which base it currently is.</param>
            <param name="toBaseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Find(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Finds a file name within a list of directories, or <see langword="null"/> if none is found.
            </summary>
            <param name="directories">The list of directories.</param>
            <param name="file">The file to search for.</param>
            <returns>The directory containing the path to the file searched for, or <see langword="null"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Form(System.String,System.Object[])">
            <summary>
            Formats the string. Shorthand for <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            </summary>
            <param name="str">The string to format. Typically with placeholders involving {0}, {1}, {2}...</param>
            <param name="args">All of the arguments to put into <paramref name="str"/>.</param>
            <returns>The formatted <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.InsertNewlines(System.String,System.UInt16)">
            <summary>
            Replaces whitespace characters with line breaks based on the line length.
            </summary>
            <remarks>
            This can be useful to prevent a <see cref="T:UnityEngine.TextMesh"/> from going outside its boundaries. A monospaced font is recommended in this case.
            </remarks>
            <param name="condition">The string to insert line breaks with.</param>
            <param name="maxLineLength">The maximum number of characters in one line.</param>
            <returns><paramref name="condition"/> with a line break every <paramref name="maxLineLength"/> or less characters.</returns>
        </member>
        <member name="M:KeepCoding.Helper.LongToBase(System.Int64,System.String)">
            <summary>
            Converts any base-10 number to any base.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="value">The value to convert.</param>
            <param name="baseChars">All of the base characters for the conversion to the base number, use <see cref="F:KeepCoding.Helper.Alphanumeric"/> for Base-62, use <see cref="F:KeepCoding.Helper.Decimal"/> for Base-10, use <see cref="F:KeepCoding.Helper.Binary"/> for Base-2. The length of the array is the base number.</param>
            <returns><paramref name="value"/>, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.LongToBase(System.Int64,System.Int32)">
            <summary>
            Converts any base-10 number to any base.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="baseNumber">Which base to convert it to.</param>
            <returns>The integer, but in the base specified.</returns>
        </member>
        <member name="M:KeepCoding.Helper.NameOfVariable``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the name of a variable.
            </summary>
            <param name="e">The <see cref="T:System.Linq.Expressions.Expression"/> which returns the object you want the name of.</param>
            <returns>The name of the variable, or if it cannot find it, <see cref="F:KeepCoding.Helper.Unknown"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.NullOrEmptyCheck(System.String,System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.String"/> is null or empty.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="source">The string to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCoding.Helper.Split(System.String,System.String)">
            <summary>
            Splits the <see cref="T:System.String"/> based on the separator.
            </summary>
            <param name="source">The <see cref="T:System.String"/> of characters to split by.</param>
            <param name="separator">The separator to split <paramref name="source"/> by.</param>
            <returns>An <see cref="T:System.Array"/> where each index is where <paramref name="separator"/> was found in <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ToOrdinal(System.Int32)">
            <summary>
            Converts a number to the ordinal as <see cref="T:System.String"/>.
            </summary>
            <param name="i">The number to convert to an ordinal.</param>
            <returns><paramref name="i"/> as an ordinal. (<see cref="T:System.String"/>)</returns>
        </member>
        <member name="M:KeepCoding.Helper.UnwrapToString``1(``0,System.Boolean,System.String)">
            <summary>
            Unwraps any object, whether it be a class, list, tuple, or any other data and concatenates it into a string.
            </summary>
            <param name="item">The object to unwrap.</param>
            <param name="getVariables">Whether it should search recursively inside the variable and yield return the elements inside <paramref name="item"/>.</param>
            <param name="delimiter">The characters in-between each element.</param>
            <returns>A string consisting of all values from <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Unwrap``1(``0,System.Boolean)">
            <summary>
            Unwraps any object, whether it be a class, list, tuple, or any other data.
            </summary>
            <param name="source">The object to unwrap.</param>
            <param name="isRecursive">Whether it should search inside the variable and yield return the elements inside <paramref name="source"/>.</param>
            <returns>An <see cref="T:System.Object"/> <see cref="T:System.Array"/> of all elements within <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Suppress(System.Action,System.Type[])">
            <summary>
            Suppresses exceptions specified from the method.
            </summary>
            <param name="action">The method to try.</param>
            <param name="exceptionTypes">The exceptions to catch and suppress.</param>
        </member>
        <member name="M:KeepCoding.Helper.Method(UnityEngine.LogType)">
            <summary>
            Gets the appropriate log method depending on the type of <see cref="T:UnityEngine.LogType"/>.
            </summary>
            <param name="logType">The type of method to get.</param>
            <returns>The log method representing the enum <paramref name="logType"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Modulo(System.Object,KeepCoding.BigInteger)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="item">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator.</param>
            <returns>Itself mod <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Stop(UnityEngine.MonoBehaviour,UnityEngine.Coroutine[])">
            <summary>
            Stops the coroutines only if they aren't <see langword="null"/>.
            </summary>
            <param name="monoBehaviour">The <see cref="T:UnityEngine.MonoBehaviour"/> instance needed to stop coroutines.</param>
            <param name="coroutines">The <see cref="T:UnityEngine.Coroutine"/>s to stop.</param>
            <returns>The array of <see cref="T:UnityEngine.Coroutine"/>s given.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetNullException``1(``0)">
            <summary>
            Gets the appropriate <see cref="T:System.Exception"/> based on the data type.
            </summary>
            <param name="item">The item to check the type for.</param>
            <returns><see cref="T:KeepCoding.NullIteratorException"/> if <paramref name="item"/> is an iterator, evaluated with <see cref="M:KeepCoding.Helper.IsIterator``1(``0)"/>, otherwise <see cref="T:System.NullReferenceException"/></returns>
        </member>
        <member name="M:KeepCoding.Helper.Suppress``1(System.Func{``0},System.Type[])">
            <summary>
            Suppresses exceptions specified from the method.
            </summary>
            <typeparam name="T">The return type of the method.</typeparam>
            <param name="func">The method to try.</param>
            <param name="exceptionTypes">The exceptions to catch and suppress.</param>
            <returns>The return of the method, or <see langword="default"/> if an exception is caught from the list of exceptions.</returns>
        </member>
        <member name="M:KeepCoding.Helper.AsEnumerable(System.Collections.IEnumerator)">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="source">The <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns><paramref name="source"/> as an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The parameter and return type.</typeparam>
            <param name="source">The <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns><paramref name="source"/> as an <see cref="T:System.Collections.IEnumerable"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the element provided to the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/> and element.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="item">The element to append to the <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but with an added <paramref name="item"/> as the last index.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Exclude``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Removes the elements whose index matches any of the indices.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="indices">The indices to exclude from <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but without the element indexing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ReflectAll``1(``0)">
            <summary>
            Gets all fields and properties of the item using reflection.
            </summary>
            <param name="source">The item to get all fields and properties.</param>
            <returns>All fields and properties of <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Include``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <summary>
            Removes the elements whose index does not match any of the indices.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="indices">The indices to include in <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but without the element indexing <paramref name="indices"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Indistinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, only allowing duplicated items.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter through.</param>
            <returns>A new instance of <paramref name="source"/> that only includes elements which are repeated in the array.</returns>
        </member>
        <member name="M:KeepCoding.Helper.NullOrEmptyCheck``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or empty.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="source">The <see cref="T:System.Array"/> to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCoding.Helper.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the element provided to the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The datatype of both the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be modified.</param>
            <param name="item">The element to append to the <paramref name="source"/>.</param>
            <returns><paramref name="source"/>, but with an added <paramref name="item"/> as the first index.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            Replaces an index in the <see cref="T:System.Collections.Generic.IEnumerable`1"/> and returns the new one.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The type of the <see cref="T:System.Collections.IEnumerable"/>.</typeparam>
            <param name="source">The initial source.</param>
            <param name="index">The index to change.</param>
            <param name="value">The value to replace at <paramref name="source"/>'s <paramref name="index"/> element.</param>
            <returns><paramref name="source"/> but the <paramref name="index"/> element is <paramref name="value"/> instead.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a slice of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The type of the <paramref name="source"/> and return type.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to take a slice of.</param>
            <param name="start">The starting index of the slice.</param>
            <param name="count">The amount of items to take.</param>
            <returns>A slice of <paramref name="source"/> based on <paramref name="start"/> and <paramref name="count"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.NullOrEmptyCheck``1(System.Collections.Generic.IEnumerator{``0},System.String)">
            <summary>
            Throws an exception if the <see cref="T:System.Collections.Generic.IEnumerator`1"/> is null or empty.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="source">The string to check for null and empty.</param>
            <param name="message">The optional message to throw if null or empty. Leaving it default will throw a default message.</param>
        </member>
        <member name="M:KeepCoding.Helper.Unwrap(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Unwraps any <see cref="T:System.Collections.IEnumerable"/> of type <see cref="T:System.Object"/>, which ends up flattening it as a <see cref="T:System.Array"/> of type <see cref="T:System.Object"/>.
            </summary>
            <param name="source">The object to unwrap.</param>
            <param name="isRecursive">Whether it should search inside the variable and yield return the elements inside <paramref name="source"/>.</param>
            <returns>An <see cref="T:System.Object"/> <see cref="T:System.Array"/> of all elements within <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetUnsolvedModuleIDs(KMBombInfo)">
            <summary>
            Gives list of module names that are unsolved.
            </summary>
            <param name="bombInfo">The instance of <see cref="T:KMBombInfo"/> needed to get the modules.</param>
            <returns>A list of unsolved module names.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetUnsolvedModuleNames(KMBombInfo)">
            <summary>
            Gives list of module names that are unsolved.
            </summary>
            <param name="bombInfo">The instance of <see cref="T:KMBombInfo"/> needed to get the modules.</param>
            <returns>A list of unsolved modules.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Rev``1(System.Collections.Generic.List{``0})">
            <summary>
            Reverses a list and returns the new list.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The type of the list.</typeparam>
            <param name="source">The list to reverse.</param>
            <returns><paramref name="source"/> with the elements reversed.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the method info from an expression.
            </summary>
            <typeparam name="T">The type of the action.</typeparam>
            <param name="expression">The expression that retrieves the method.</param>
            <returns>The method info of the function.</returns>
        </member>
        <member name="M:KeepCoding.Helper.SplitBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Splits an <see cref="T:System.Collections.IEnumerable"/> in two based on a method provided.
            </summary>
            <typeparam name="T">The type of the collection.</typeparam>
            <param name="source">The collection to split.</param>
            <param name="func">The method that decides where the item ends up.</param>
            <returns>A <see cref="T:KeepCoding.Tuple`2"/> consisting of items from <paramref name="source"/> where <see cref="P:KeepCoding.Tuple`1.Item1"/> contains items that returned true in <paramref name="func"/>, and <see cref="P:KeepCoding.Tuple`2.Item2"/> otherwise.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Assert``1(``0,System.String)">
            <summary>
            Throws a <see cref="T:UnityEngine.MissingComponentException"/> if the <see cref="T:UnityEngine.Object"/> given is <see langword="null"/>, then returning the <see cref="T:UnityEngine.Object"/> <paramref name="obj"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:UnityEngine.Object"/>.</typeparam>
            <param name="obj">The <see cref="T:UnityEngine.Object"/> to do a null check on.</param>
            <param name="message">The message of the exception.</param>
            <returns>The component <paramref name="obj"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Call``1(``0,System.Action{``0})">
            <summary>
            Invokes a method of <typeparamref name="T"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="T">The type of <paramref name="item"/> and <paramref name="action"/>.</typeparam>
            <param name="item">The item to use as reference and modify.</param>
            <param name="action">The action to apply <paramref name="item"/> to.</param>
            <returns>The item <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Call``1(``0,UnityEngine.LogType)">
            <summary>
            Invokes a logging method and then returns the argument provided.
            </summary>
            <typeparam name="T">The type of logging.</typeparam>
            <param name="item">The item to log</param>
            <param name="logType">The type of logging.</param>
            <returns>The item <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.ElementAtWrap``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element of an array, pretending that the array wraps around or is circular.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="source">The array itself.</param>
            <param name="index">The index, which will wrap around if it's larger than the array.</param>
            <returns>The element in <paramref name="source"/> using <paramref name="index"/> with rem-euclid modulo.</returns>
        </member>
        <member name="M:KeepCoding.Helper.FirstValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Returns the first element which doesn't return null, or null if all of them return null.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of array, and method.</typeparam>
            <param name="source">The array to iterate on.</param>
            <param name="func">The method which returns</param>
            <returns>The first value from <paramref name="source"/> where <paramref name="func"/> doesn't return null, or null.</returns>
        </member>
        <member name="M:KeepCoding.Helper.LastValue``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0})">
            <summary>
            Returns the last element which doesn't return null, or null if all of them return null.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of array, and method.</typeparam>
            <param name="source">The array to iterate on.</param>
            <param name="func">The method which returns</param>
            <returns>The last value from <paramref name="source"/> where <paramref name="func"/> doesn't return null, or null.</returns>
        </member>
        <member name="M:KeepCoding.Helper.NullCheck``1(``0,System.String)">
            <summary>
            Throws a <see cref="T:System.NullReferenceException"/> or <see cref="T:KeepCoding.NullIteratorException"/> if the parameter provided is null.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="item">The parameter to check null for.</param>
            <param name="message">The optional message to throw if null.</param>
            <returns><paramref name="item"/></returns>
        </member>
        <member name="M:KeepCoding.Helper.Apply``2(``0,System.Func{``0,``1})">
            <summary>
            Invokes a method of <typeparamref name="TInput"/> to <typeparamref name="TOutput"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="TInput">The type of <paramref name="item"/>.</typeparam>
            <typeparam name="TOutput">The type to return.</typeparam>
            <param name="item">The item to use as reference and modify.</param>
            <param name="func">The function to apply <paramref name="item"/> to.</param>
            <returns>The item <paramref name="item"/> after <paramref name="func"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Append``1(``0[],``0)">
            <summary>
            Appends the element provided to the array.
            </summary>
            <typeparam name="T">The datatype of both the array and element.</typeparam>
            <param name="array">The array to be appended with.</param>
            <param name="item">The element to append to the <paramref name="array"/>.</param>
            <returns><paramref name="array"/>, but with an added <paramref name="item"/> as the last index.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Call``1(``0[],System.Action{``0,System.Int32})">
            <summary>
            Invokes a method of <typeparamref name="T"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The type of <paramref name="source"/> and <paramref name="action"/>.</typeparam>
            <param name="source">The item to use as reference and modify.</param>
            <param name="action">The action to apply <paramref name="source"/> to.</param>
            <returns>The item <paramref name="source"/>.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetValues``1">
            <summary>
            Gets all the values of an <see cref="T:System.Enum"/> as an <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Enum"/>.</typeparam>
            <returns>An <see cref="T:System.Array"/> of <typeparamref name="T"/> containing all the values of that enum.</returns>
        </member>
        <member name="M:KeepCoding.Helper.GetValues``1(``0)">
            <summary>
            Gets all the values of an <see cref="T:System.Enum"/> as an <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Enum"/>.</typeparam>
            <param name="_">A discard value, which can implicitly let the method know the type.</param>
            <returns>An <see cref="T:System.Array"/> of <typeparamref name="T"/> containing all the values of that enum.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Prepend``1(``0[],``0)">
            <summary>
            Prepends the element provided to the array.
            </summary>
            <typeparam name="T">The datatype of both the array and element.</typeparam>
            <param name="array">The array to be appended with.</param>
            <param name="item">The element to append to the <paramref name="array"/>.</param>
            <returns><paramref name="array"/>, but with an added <paramref name="item"/> as the first index.</returns>
        </member>
        <member name="M:KeepCoding.Helper.Apply``2(``0[],System.Func{``0,System.Int32,``1})">
            <summary>
            Invokes a method of <typeparamref name="TInput"/> to <typeparamref name="TOutput"/> and then returns the argument provided.
            </summary>
            <remarks>
            This can be used to intercept current variables or calculations by for example, printing the value as it is being passed as an argument.
            </remarks>
            <typeparam name="TInput">The type of <paramref name="items"/>.</typeparam>
            <typeparam name="TOutput">The type to return.</typeparam>
            <param name="items">The item to use as reference and modify.</param>
            <param name="func">The function to apply <paramref name="items"/> to.</param>
            <returns>The item <paramref name="items"/> after <paramref name="func"/>.</returns>
        </member>
        <member name="T:KeepCoding.TypeHelper">
            <summary>
            Extension methods to help you create data types easier. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.TypeHelper.IsEqual(UnityEngine.Color32,UnityEngine.Color32)">
            <summary>
            Checks if both colors have the same RGBA values.
            </summary>
            <param name="colorA">The first color.</param>
            <param name="colorB">The second color.</param>
            <returns>Boolean, true only if both colors have the same R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IsEqual(UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Checks if both colors have the same RGBA values.
            </summary>
            <param name="colorA">The first color.</param>
            <param name="colorB">The second color.</param>
            <returns>Boolean, true only if both colors have the same R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IsAnyEqual(UnityEngine.Color32[],UnityEngine.Color32)">
            <summary>
            Checks if any elements in the array <paramref name="colors"/> are equal to <paramref name="color"/>.
            </summary>
            <param name="colors">The array of colors to compare to <paramref name="color"/>.</param>
            <param name="color">The color to compare it to.</param>
            <returns>Boolean, true only if any color in <paramref name="colors"/> is the exact same as <paramref name="color"/>'s R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IsAnyEqual(UnityEngine.Color[],UnityEngine.Color)">
            <summary>
            Checks if any elements in the array <paramref name="colors"/> are equal to <paramref name="color"/>.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="colors">The array of colors to compare to <paramref name="color"/>.</param>
            <param name="color">The color to compare it to.</param>
            <returns>Boolean, true only if any color in <paramref name="colors"/> is the exact same as <paramref name="color"/>'s R, G, B, and A values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract.
            </remarks>
            <param name="color">The color to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Color,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract.
            </remarks>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IntertwineColor(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Creates an in-between color between 2 different colors.
            </summary>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>A blended color of the 2 provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IntertwineColor(UnityEngine.Renderer,UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Sets the <see cref="P:UnityEngine.Renderer.material"/>'s color to be a mix of 2 colors.
            </summary>
            <param name="renderer">The renderer to change the color of.</param>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>The resulting color that the <paramref name="renderer"/> becomes.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Color,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the color, and sets the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Color,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Duplicates the color, and sets the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Color32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract. As this is <see cref="T:UnityEngine.Color32"/>, be careful of byte underflows/overflows.
            </remarks>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Color32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Duplicates the color, and adds the RGBA components only if they are specified.
            </summary>
            <remarks>
            You can also use negative numbers to subtract. As this is <see cref="T:UnityEngine.Color32"/>, be careful of byte underflows/overflows.
            </remarks>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.HexToColor(System.String)">
            <summary>
            Converts a hexadecimal string into colors.
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <param name="hex">A string of hexadecimal, which can be formatted as "FFFFFF", "#FFFFFF", or "0xFFFFFF"</param>
            <returns><see cref="T:UnityEngine.Color32"/> converted from hexadecimal string.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IntertwineColor(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <summary>
            Creates an in-between color between 2 different colors.
            </summary>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>A blended color of the 2 provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.IntertwineColor(UnityEngine.Renderer,UnityEngine.Color32,UnityEngine.Color32,System.Single)">
            <summary>
            Sets the <see cref="P:UnityEngine.Renderer.material"/>'s color to be a mix of 2 colors.
            </summary>
            <param name="renderer">The renderer to change the color of.</param>
            <param name="colorA">The first color, with 0 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="colorB">The second color, with 1 <paramref name="concentrationOfB"/> being biased towards this color.</param>
            <param name="concentrationOfB">The bias towards either color, between 0-1. 0.5 blends both colors equally.</param>
            <returns>The resulting color that the <paramref name="renderer"/> becomes.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Color32,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the color, and sets the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Color32,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
            Duplicates the color, and sets the RGBA components only if they are specified.
            </summary>
            <param name="color">The <see cref="T:UnityEngine.Color32"/> to duplicate and modify.</param>
            <param name="r">The red component.</param>
            <param name="g">The blue component.</param>
            <param name="b">The green component.</param>
            <param name="a">The alpha component; opacity.</param>
            <returns>A new instance of the <paramref name="color"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToLogger``1(``0,System.String,System.Boolean)">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Logger"/>.
            </summary>
            <typeparam name="T">The type of the argument, which is used as the name if <paramref name="name"/> is null.</typeparam>
            <param name="_">The discard which is only needed for the type.</param>
            <param name="name">The name of the value.</param>
            <param name="showId">Determines whether to show the unique identifier when logging.</param>
            <returns>A new <see cref="T:KeepCoding.Logger"/> containing the arguments specified.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToRoutine(UnityEngine.MonoBehaviour,System.Func{System.Collections.IEnumerator})">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Routine"/>.
            </summary>
            <param name="func">The function to call when the <see cref="T:System.Collections.IEnumerator"/> is called.</param>
            <param name="monoBehaviour">The instance of the <see cref="T:UnityEngine.MonoBehaviour"/> to start the <see cref="T:UnityEngine.Coroutine"/> from.</param>
            <returns>A new <see cref="T:KeepCoding.Routine"/> containing the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToRoutine``1(UnityEngine.MonoBehaviour,System.Func{``0,System.Collections.IEnumerator})">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Routine`1"/>.
            </summary>
            <param name="func">The function to call when the <see cref="T:System.Collections.IEnumerator"/> is called.</param>
            <param name="monoBehaviour">The instance of the <see cref="T:UnityEngine.MonoBehaviour"/> to start the <see cref="T:UnityEngine.Coroutine"/> from.</param>
            <returns>A new <see cref="T:KeepCoding.Routine`1"/> containing the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToRoutine``2(UnityEngine.MonoBehaviour,System.Func{``0,``1,System.Collections.IEnumerator})">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Routine`2"/>.
            </summary>
            <param name="func">The function to call when the <see cref="T:System.Collections.IEnumerator"/> is called.</param>
            <param name="monoBehaviour">The instance of the <see cref="T:UnityEngine.MonoBehaviour"/> to start the <see cref="T:UnityEngine.Coroutine"/> from.</param>
            <returns>A new <see cref="T:KeepCoding.Routine`2"/> containing the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToRoutine``3(UnityEngine.MonoBehaviour,System.Func{``0,``1,``2,System.Collections.IEnumerator})">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Routine`3"/>.
            </summary>
            <param name="func">The function to call when the <see cref="T:System.Collections.IEnumerator"/> is called.</param>
            <param name="monoBehaviour">The instance of the <see cref="T:UnityEngine.MonoBehaviour"/> to start the <see cref="T:UnityEngine.Coroutine"/> from.</param>
            <returns>A new <see cref="T:KeepCoding.Routine`3"/> containing the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToRoutine``4(UnityEngine.MonoBehaviour,System.Func{``0,``1,``2,``3,System.Collections.IEnumerator})">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Routine`4"/>.
            </summary>
            <param name="func">The function to call when the <see cref="T:System.Collections.IEnumerator"/> is called.</param>
            <param name="monoBehaviour">The instance of the <see cref="T:UnityEngine.MonoBehaviour"/> to start the <see cref="T:UnityEngine.Coroutine"/> from.</param>
            <returns>A new <see cref="T:KeepCoding.Routine`4"/> containing the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToTuple``1(``0)">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Tuple`1"/>.
            </summary>
            <typeparam name="T">The type of tuple.</typeparam>
            <param name="item">The argument to pass into the tuple.</param>
            <returns>A new <see cref="T:KeepCoding.Tuple`1"/> containing <paramref name="item"/>.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToTuple``2(``0,``1)">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Tuple`2"/>.
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <param name="item1">The first argument to pass into the tuple.</param>
            <param name="item2">The second argument to pass into the tuple.</param>
            <returns>A new <seealso cref="T:KeepCoding.Tuple`2"/> containing <paramref name="item1"/> and <paramref name="item2"/></returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToTuple``3(``0,``1,``2)">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Tuple`3"/>.
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <typeparam name="T3">The third type of the tuple.</typeparam>
            <param name="item1">The first argument to pass into the tuple.</param>
            <param name="item2">The second argument to pass into the tuple.</param>
            <param name="item3">The third argument to pass into the tuple.</param>
            <returns>A new <seealso cref="T:KeepCoding.Tuple`3"/> containing <paramref name="item1"/>, <paramref name="item2"/>, and <paramref name="item3"/></returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToTuple``4(``0,``1,``2,``3)">
            <summary>
            Converts arguments to a new <see cref="T:KeepCoding.Tuple`4"/>.
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <typeparam name="T3">The third type of the tuple.</typeparam>
            <typeparam name="T4">The fourth type of the tuple.</typeparam>
            <param name="item1">The first argument to pass into the tuple.</param>
            <param name="item2">The second argument to pass into the tuple.</param>
            <param name="item3">The third argument to pass into the tuple.</param>
            <param name="item4">The fourth argument to pass into the tuple.</param>
            <returns>A new <seealso cref="T:KeepCoding.Tuple`4"/> containing <paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>, and <paramref name="item4"/></returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Vector2@,System.Single,System.Single)">
            <summary>
            Duplicates the vector, and sets the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Takes the vector, and sets the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Vector3@,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the vector, and sets the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Takes the vector, and sets the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Vector4@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Duplicates the vector, and sets the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Add(UnityEngine.Vector4,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Takes the vector, and sets the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Vector2@,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Takes the vector, and sets the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Vector2,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the vector, and sets the x and y components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector2"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Vector3@,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Takes the vector, and sets the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Vector3,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the vector, and sets the x, y, and z components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Vector4@,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Takes the vector, and sets the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.Set(UnityEngine.Vector4,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Duplicates the vector, and sets the x, y, z, and w components only if they are specified.
            </summary>
            <param name="vector">The <see cref="T:UnityEngine.Vector3"/> to duplicate and modify.</param>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
            <param name="w">The w value.</param>
            <returns>A new instance of <paramref name="vector"/>, with the arguments replacing the values.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToVersion(System.String)">
            <summary>
            Converts argument to a new <see cref="T:System.Version"/>. Major-only versions are compatible.
            </summary>
            <param name="s">The string to convert to a version.</param>
            <returns>A new <see cref="T:System.Version"/> representing the input <paramref name="s"/>.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToWork(System.UInt32,System.Action,System.Boolean)">
            <summary>
            Converts argument to a new <see cref="T:KeepCoding.Work"/>
            </summary>
            <param name="action">The action to run when the thread is active.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
            <returns>A new <see cref="T:KeepCoding.Work"/> consisting of the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToWork``1(System.UInt32,System.Func{``0},System.Boolean)">
            <summary>
            Converts argument to a new <see cref="T:KeepCoding.Work`1"/>
            </summary>
            <param name="func">The action to run when the thread is active.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
            <returns>A new <see cref="T:KeepCoding.Work`1"/> consisting of the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToWork``2(System.UInt32,System.Func{``0,``1},System.Boolean)">
            <summary>
            Converts argument to a new <see cref="T:KeepCoding.Work`2"/>
            </summary>
            <param name="func">The action to run when the thread is active.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
            <returns>A new <see cref="T:KeepCoding.Work`2"/> consisting of the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToWork``3(System.UInt32,System.Func{``0,``1,``2},System.Boolean)">
            <summary>
            Converts argument to a new <see cref="T:KeepCoding.Work`3"/>
            </summary>
            <param name="func">The action to run when the thread is active.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
            <returns>A new <see cref="T:KeepCoding.Work`3"/> consisting of the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToWork``4(System.UInt32,System.Func{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Converts argument to a new <see cref="T:KeepCoding.Work`4"/>
            </summary>
            <param name="func">The action to run when the thread is active.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
            <returns>A new <see cref="T:KeepCoding.Work`4"/> consisting of the arguments provided.</returns>
        </member>
        <member name="M:KeepCoding.TypeHelper.ToWork``5(System.UInt32,System.Func{``0,``1,``2,``3,``4},System.Boolean)">
            <summary>
            Converts argument to a new <see cref="T:KeepCoding.Work`5"/>
            </summary>
            <param name="func">The action to run when the thread is active.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
            <returns>A new <see cref="T:KeepCoding.Work`5"/> consisting of the arguments provided.</returns>
        </member>
        <member name="T:KeepCoding.BigInteger">
            <summary>
            Stores an arbitrarily large number. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.BigInteger.#ctor(System.Object)">
            <summary>
            Creates a big integer containing the number specified.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="value">The value to store. <see cref="T:System.Array"/>, <see cref="T:System.String"/>, and any number-type are compatible.</param>
        </member>
        <member name="M:KeepCoding.BigInteger.#ctor">
            <summary>
            Creates a big integer with the default value. (0)
            </summary>
        </member>
        <member name="P:KeepCoding.BigInteger.Item(System.Int32,System.Boolean)">
            <summary>
            Indexable number. Allows you to treat the value as an array.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <param name="index">The <paramref name="index"/>th digit to look from.</param>
            <param name="isLeftToRight">Determines if the index goes from left-to-right (<see langword="true"/>), or right-to-left (<see langword="false"/>).</param>
            <returns>The current value's <paramref name="index"/>th digit.</returns>
        </member>
        <member name="P:KeepCoding.BigInteger.IsNegative">
            <value>
            Whether or not the number is negative.
            </value>
        </member>
        <member name="P:KeepCoding.BigInteger.Length">
            <value>
            The amount of digits of the value.
            </value>
        </member>
        <member name="P:KeepCoding.BigInteger.GetLowerBound">
            <value>
            The first digit's index.
            </value>
        </member>
        <member name="P:KeepCoding.BigInteger.GetUpperBound">
            <value>
            The last digit's index.
            </value>
        </member>
        <member name="P:KeepCoding.BigInteger.Value">
            <summary>
            The number itself. The instance is duplicated so that the original BigInteger's value may not be modified directly.
            </summary>
        </member>
        <member name="P:KeepCoding.BigInteger.Zero">
            <value>
            BigInteger with value zero. (Default value)
            </value>
        </member>
        <member name="P:KeepCoding.BigInteger.One">
            <value>
            BigInteger with value one.
            </value>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Equality(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Equals operator; determines if both integers contain the same value.
            </summary>
            <param name="bigIntegerA">The left-hand side operator</param>
            <param name="bigIntegerB">The right-hand side operator.</param>
            <returns>True if both are the same number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Equality(KeepCoding.BigInteger,System.Object)">
            <summary>
            Equals operator; determines if both integers contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="bigInteger">The left-hand side operator</param>
            <param name="value">The right-hand side operator.</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if both are the same number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Equality(System.Object,KeepCoding.BigInteger)">
            <summary>
            Equals operator; determines if both integers contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if both are the same number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Inequality(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Not equals operator; determines if both integers do not contain the same value.
            </summary>
            <param name="bigIntegerA">The left-hand side operator</param>
            <param name="bigIntegerB">The right-hand side operator.</param>
            <returns>True if both are not the same number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Inequality(KeepCoding.BigInteger,System.Object)">
            <summary>
            Not equals operator; determines if both integers do not contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="bigInteger">The left-hand side operator</param>
            <param name="value">The right-hand side operator.</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if both are not the same number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Inequality(System.Object,KeepCoding.BigInteger)">
            <summary>
            Not equals operator; determines if both integers do not contain the same value. The <see cref="T:System.Object"/> is casted as a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="value">The left-hand side operator</param>
            <param name="bigInteger">The right-hand side operator.</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if both are not the same number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_GreaterThan(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            More than operator; determines if left-hand side has a greater value than right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is more than <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_GreaterThan(KeepCoding.BigInteger,System.Object)">
            <summary>
            More than operator; determines if left-hand side has a greater value than right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="bigInteger"/> is more than <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_GreaterThan(System.Object,KeepCoding.BigInteger)">
            <summary>
            More than operator; determines if left-hand side has a greater value than right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="value"/> is more than <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_LessThan(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Less than operator; determines if left-hand side has a lesser value than right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is less than <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_LessThan(KeepCoding.BigInteger,System.Object)">
            <summary>
            Less than operator; determines if left-hand side has a lesser value than right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="bigInteger"/> is less than <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_LessThan(System.Object,KeepCoding.BigInteger)">
            <summary>
            Less than operator; determines if left-hand side has a lesser value than right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="value"/> is less than <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_GreaterThanOrEqual(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            More than or equals operator; determines if left-hand side has a greater value or is equal to the right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is more than or equal <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_GreaterThanOrEqual(KeepCoding.BigInteger,System.Object)">
            <summary>
            More than or equals operator; determines if left-hand side has a greater value or is equal to the right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="bigInteger"/> is more than or equal <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_GreaterThanOrEqual(System.Object,KeepCoding.BigInteger)">
            <summary>
            More than or equals operator; determines if left-hand side has a greater value or is equal to the right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="value"/> is more than or equal <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_LessThanOrEqual(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Less than or equals operator; determines if left-hand side has a lesser value or is equal to the right-hand side.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>True if <paramref name="bigIntegerA"/> is less than or equal <paramref name="bigIntegerB"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_LessThanOrEqual(KeepCoding.BigInteger,System.Object)">
            <summary>
            Less than or equals operator; determines if left-hand side has a lesser value or is equal to the right-hand side.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="bigInteger"/> is less than or equal <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_LessThanOrEqual(System.Object,KeepCoding.BigInteger)">
            <summary>
            Less than or equals operator; determines if left-hand side has a lesser value or is equal to the right-hand side.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="value"/> is less than or equal <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_UnaryPlus(KeepCoding.BigInteger)">
            <summary>
            Positive operator; returns itself.
            </summary>
            <param name="bigInteger">The number.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_UnaryNegation(KeepCoding.BigInteger)">
            <summary>
            Negative operator; inverts <see cref="P:KeepCoding.BigInteger.IsNegative"/>.
            </summary>
            <param name="bigInteger">The number.</param>
            <returns>The number, inverting <see cref="P:KeepCoding.BigInteger.IsNegative"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Increment(KeepCoding.BigInteger)">
            <summary>
            Addition operator; adds 1.
            </summary>
            <param name="bigInteger">The number.</param>
            <returns>The number + 1.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Decrement(KeepCoding.BigInteger)">
            <summary>
            Subtraction operator; subtracts 1.
            </summary>
            <param name="bigInteger">The number.</param>
            <returns>The number - 1.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Addition(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Add operator; gets the sum of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The sum of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Addition(KeepCoding.BigInteger,System.Object)">
            <summary>
            Add operator; gets the sum of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The sum of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Addition(System.Object,KeepCoding.BigInteger)">
            <summary>
            Addition operator; gets the sum of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The sum of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Subtraction(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Subtraction operator; gets the difference of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The difference of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Subtraction(KeepCoding.BigInteger,System.Object)">
            <summary>
            Subtraction operator; gets the difference of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The difference of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Subtraction(System.Object,KeepCoding.BigInteger)">
            <summary>
            Subtraction operator; gets the difference of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The difference of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Multiply(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Multiplication operator; gets the product of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The product of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Multiply(KeepCoding.BigInteger,System.Object)">
            <summary>
            Multiplication operator; gets the product of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The product of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Multiply(System.Object,KeepCoding.BigInteger)">
            <summary>
            Multiplication operator; gets the product of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The product of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Division(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Division operator; gets the quotient of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The quotient of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Division(KeepCoding.BigInteger,System.Object)">
            <summary>
            Division operator; gets the quotient of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The quotient of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Division(System.Object,KeepCoding.BigInteger)">
            <summary>
            Division operator; gets the quotient of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The quotient of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Modulus(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Modulo operator; gets the modulo of 2 numbers.
            </summary>
            <param name="bigIntegerA">The left-hand side operator.</param>
            <param name="bigIntegerB">The right-hand side operator</param>
            <returns>The modulo of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Modulus(KeepCoding.BigInteger,System.Object)">
            <summary>
            Modulo operator; gets the modulo of 2 numbers.
            </summary>
            <param name="bigInteger">The left-hand side operator.</param>
            <param name="value">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The modulo of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Modulus(System.Object,KeepCoding.BigInteger)">
            <summary>
            Modulo operator; gets the modulo of 2 numbers.
            </summary>
            <param name="value">The left-hand side operator.</param>
            <param name="bigInteger">The right-hand side operator</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>The modulo of both sides.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Explicit(KeepCoding.BigInteger)~System.Int32">
            <summary>
            Converts the <see cref="T:KeepCoding.BigInteger"/> to a <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCoding.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Implicit(System.Int32)~KeepCoding.BigInteger">
            <summary>
            Converts the <see cref="T:System.Int32"/> to a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="value">The value to convert into <see cref="T:KeepCoding.BigInteger"/>.</param>
            <returns><see cref="T:KeepCoding.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Explicit(KeepCoding.BigInteger)~System.Int64">
            <summary>
            Converts the <see cref="T:KeepCoding.BigInteger"/> to a <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCoding.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Implicit(System.Int64)~KeepCoding.BigInteger">
            <summary>
            Converts the <see cref="T:System.Int64"/> to a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="value">The value to convert into <see cref="T:KeepCoding.BigInteger"/>.</param>
            <returns><see cref="T:KeepCoding.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Explicit(KeepCoding.BigInteger)~System.UInt32">
            <summary>
            Converts the <see cref="T:KeepCoding.BigInteger"/> to a <see cref="T:System.UInt32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCoding.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Implicit(System.UInt32)~KeepCoding.BigInteger">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="value">The value to convert into <see cref="T:KeepCoding.BigInteger"/>.</param>
            <returns><see cref="T:KeepCoding.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Explicit(KeepCoding.BigInteger)~System.UInt64">
            <summary>
            Converts the <see cref="T:KeepCoding.BigInteger"/> to a <see cref="T:System.UInt64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <param name="bigInteger">The instance of <see cref="T:KeepCoding.BigInteger"/> to convert.</param>
            <returns>Itself as <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.op_Implicit(System.UInt64)~KeepCoding.BigInteger">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to a <see cref="T:KeepCoding.BigInteger"/>.
            </summary>
            <param name="value">The value to convert into <see cref="T:KeepCoding.BigInteger"/>.</param>
            <returns><see cref="T:KeepCoding.BigInteger"/> with value <paramref name="value"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.Equals(System.Object)">
            <summary>
            Determins if both values are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if both values are equal.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.GetHashCode">
            <summary>
            Gets the hash code of the current values.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.ToString">
            <summary>
            Converts the current array it stores as a string.
            </summary>
            <returns>The value of itself.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.Equals(KeepCoding.BigInteger)">
            <summary>
            Determins if both values are equal.
            </summary>
            <param name="other">The comparison.</param>
            <returns>True if both values are equal.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.IsBetween(KeepCoding.BigInteger,KeepCoding.BigInteger)">
            <summary>
            Determines if it is between 2 other <see cref="T:KeepCoding.BigInteger"/> variables. Equality will count as true.
            </summary>
            <param name="min">The minimum value accepted.</param>
            <param name="max">The maximum value accepted.</param>
            <returns>True if <paramref name="min"/> is smaller or equal itself and <paramref name="max"/> is greater or equal itself.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.IsBetween``1(``0,``0)">
            <summary>
            Determines if it is between 2 other variables. Equality will count as true.
            </summary>
            <param name="min">The minimum value accepted.</param>
            <param name="max">The maximum value accepted.</param>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <returns>True if <paramref name="min"/> is smaller or equal itself and <paramref name="max"/> is greater or equal itself.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.ToInt">
            <summary>
            Converts the BigInteger to a <see cref="T:System.Int32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.ToLong">
            <summary>
            Converts the BigInteger to a <see cref="T:System.Int64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.ToUInt">
            <summary>
            Converts the BigInteger to a <see cref="T:System.UInt32"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.ToULong">
            <summary>
            Converts the BigInteger to a <see cref="T:System.UInt64"/>.
            </summary>
            <exception cref="T:System.InvalidCastException"></exception>
            <returns>Itself as <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.Clone">
            <summary>
            Makes a new instance/deep clone of <see cref="T:KeepCoding.BigInteger"/> with the same value.
            </summary>
            <returns>A deep clone of itself.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.Clone(KeepCoding.BigInteger)">
            <summary>
            Makes a new instance/deep clone of <see cref="T:KeepCoding.BigInteger"/> with the same value.
            </summary>
            <param name="bigInteger">The <see cref="T:KeepCoding.BigInteger"/> to clone.</param>
            <returns>A deep clone of itself.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.Modulo(KeepCoding.BigInteger)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <param name="bigInteger">The right-hand side operator.</param>
            <returns>Itself mod <paramref name="bigInteger"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.Modulo``1(``0)">
            <summary>
            Calculates the rem-euclid modulo, which allows negative numbers to be properly calculated.
            </summary>
            <exception cref="T:System.DivideByZeroException"></exception>
            <exception cref="T:KeepCoding.NegativeNumberException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="obj">The right-hand side operator.</param>
            <returns>Itself mod <paramref name="obj"/>.</returns>
        </member>
        <member name="M:KeepCoding.BigInteger.GetEnumerator">
            <summary>
            Gets the enumerator of the <see cref="T:KeepCoding.BigInteger"/>, using <see cref="P:KeepCoding.BigInteger.Value"/>.
            </summary>
            <returns>The current number of this <see cref="T:KeepCoding.BigInteger"/>.</returns>
        </member>
        <member name="T:KeepCoding.ComponentPool">
            <summary>
            A ComponentPool is a collection of Module Types. The generator will pick Count times from this list and instantiate a component of the chosen type. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.ComponentPool.#ctor(System.Int32,KeepCoding.ComponentPool.ComponentSource,KeepCoding.ComponentPool.SpecialComponentTypeEnum,System.Collections.Generic.List{System.String},System.Collections.Generic.List{KeepCoding.ComponentPool.ComponentTypeEnum})">
            <summary>
            Creates a Component pool.
            </summary>
            <param name="count">How many components from this pool should be selected.</param>
            <param name="allowedSources">Controls where components can come from (either the base game, mods, or both).</param>
            <param name="specialComponentType">Special types which are calculated at runtime, such as <see cref="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_SOLVABLE"/>.</param>
            <param name="modTypes">A list of mod types to be included in the pool, if they exist.</param>
            <param name="componentTypes">The list of component types, not including any calculated at runtime special types, like ALL_SOLVABLE. Use GetComponentTypes to get the calculated list.</param>
        </member>
        <member name="T:KeepCoding.ComponentPool.ComponentSource">
            <summary>
            Controls where this pool will draw from (e.g. the base game modules, modules from mods, or both).
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentSource.Base">
            <value>
            Indicates that the module is from the base game.
            </value>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentSource.Mods">
            <value>
            Indicates that the module is from mods.
            </value>
        </member>
        <member name="T:KeepCoding.ComponentPool.SpecialComponentTypeEnum">
            <summary>
            Controls whether the modules will be chosen dynamically at runtime from whatever modules are loaded (based on the ComponentSource). Set to "None" to select specific module types.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.None">
            <value>
            Indicates that the mission will choose a set of modules that are self-defined.
            </value>
        </member>
        <member name="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_SOLVABLE">
            <value>
            Indicates that the mission will randomly pull any of the game's loaded solvable modules.
            </value>
        </member>
        <member name="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_NEEDY">
            <value>
            Indicates that the mission will randomly pull any of the game's loaded needy modules.
            </value>
        </member>
        <member name="T:KeepCoding.ComponentPool.ComponentTypeEnum">
            <summary>
            The module types in the base game.
            </summary>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Empty">
            <value>
            No module. Uses the bomb backing.
            </value>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Timer">
            <value>
            The timer component.
            </value>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Wires">
            <value>
            On the Subject of Wires.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Wires.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.BigButton">
            <value>
            On the Subject of The Button.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/The%20Button.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Keypad">
            <value>
            On the Subject of Keypads.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Keypad.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Simon">
            <value>
            On the Subject of Simon Says. 
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Simon%20Says.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.WhosOnFirst">
            <value>
            On the Subject of Who's on First.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Who's%20On%20First.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Memory">
            <value>
            On the Subject of Memory.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Memory.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Morse">
            <value>
            On the Subject of Morse Code.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Morse%20Code.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Venn">
            <value>
            On the Subject of Complicated Wires.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Complicated%20Wires.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.WireSequence">
            <value>
            On the Subject of Wire Sequences.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Wire%20Sequence.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Maze">
            <value>
            On the Subject of Mazes.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Maze.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Password">
            <value>
            On the Subject of Passwords.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Password.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyVentGas">
            <value>
            On the Subject of Venting Gas.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Venting%20Gas.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyCapacitor">
            <value>
            On the Subject of Capacitor Discharge.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Capacitor%20Discharge.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyKnob">
            <value>
            On the Subject of Knobs.
            </value>
            <remarks><seealso href="https://ktane.timwi.de/HTML/Knob.html"/></remarks>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.Mod">
            <value>
            Any solvable modded module.
            </value>
        </member>
        <member name="F:KeepCoding.ComponentPool.ComponentTypeEnum.NeedyMod">
            <value>
            Any needy modded module.
            </value>
        </member>
        <member name="P:KeepCoding.ComponentPool.Count">
            <value>
            How many components from this pool should be selected.
            </value>
        </member>
        <member name="P:KeepCoding.ComponentPool.AllowedSources">
            <value>
            Controls where components can come from (either the base game, mods, or both).
            </value>
        </member>
        <member name="P:KeepCoding.ComponentPool.SpecialComponentType">
            <value>
            Special types which are calculated at runtime, such as <see cref="F:KeepCoding.ComponentPool.SpecialComponentTypeEnum.ALL_SOLVABLE"/>.
            </value>
        </member>
        <member name="P:KeepCoding.ComponentPool.ModTypes">
            <value>
            A list of mod types to be included in the pool, if they exist.
            </value>
        </member>
        <member name="P:KeepCoding.ComponentPool.ComponentTypes">
            <value>
            The list of component types, not including any calculated at runtime special types, like ALL_SOLVABLE. Use GetComponentTypes to get the calculated list.
            </value>
        </member>
        <member name="M:KeepCoding.ComponentPool.ToString">
            <summary>
            Converts itself to a string.
            </summary>
            <returns>The list of mod types with a count at the end.</returns>
        </member>
        <member name="T:KeepCoding.GeneratorSetting">
            <summary>
            Everything needed to generate a single bomb. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.Single,System.Collections.Generic.List{KeepCoding.ComponentPool})">
            <summary>
            Creates a generator setting based on the provided parameters.
            </summary>
            <param name="frontFaceOnly">Force modules to be placed only on the front face. By default this will limit the module count to 5 (+1 for the timer). Useful in rare circumstances where you wish to generate a bomb with a few modules and guarantee that they will all be visibile simultaneously.</param>
            <param name="optionalWidgetCount">Set how many optional widgets (widgets other than serial number) that should be placed on the bomb.</param>
            <param name="numStrikes">The number of strikes at which the bomb explodes. Hardcore is 1. More forgiving is 3.</param>
            <param name="timeBeforeNeedyActivation">Time, in seconds, which must elapse before any unactivated Needy modules are automatically activated.</param>
            <param name="timeLimit">Initial value for the timer when the bomb is activated, in seconds.</param>
            <param name="componentPools">The pools of modules that will be used when generating a bomb.</param>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.#ctor">
            <summary>
            Creates a generator setting with the default parameters.
            </summary>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.FrontFaceOnly">
            <value>
            Force modules to be placed only on the front face. By default this will limit the module count to 5 (+1 for the timer). Useful in rare circumstances where you wish to generate a bomb with a few modules and guarantee that they will all be visibile simultaneously.
            </value>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.OptionalWidgetCount">
            <value>
            Set how many optional widgets (widgets other than serial number) that should be placed on the bomb.
            </value>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.NumStrikes">
            <value>
            The number of strikes at which the bomb explodes. Hardcore is 1. More forgiving is 3.
            </value>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.TimeBeforeNeedyActivation">
            <value>
            Time, in seconds, which must elapse before any unactivated Needy modules are automatically activated.
            </value>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.TimeLimit">
            <value>
            Initial value for the timer when the bomb is activated, in seconds.
            </value>
        </member>
        <member name="P:KeepCoding.GeneratorSetting.ComponentPools">
            <value>
            The pools of modules that will be used when generating a bomb.
            </value>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.GetComponentCount">
            <summary>
            The total count of modules that will be added according to the component pools.
            </summary>
            <returns>The amount of components.</returns>
        </member>
        <member name="M:KeepCoding.GeneratorSetting.ToString">
            <summary>
            Converts itself to a string.
            </summary>
            <returns>Time, number of strikes, and the pools converted to a string.</returns>
        </member>
        <member name="T:KeepCoding.Logger">
            <summary>
            A class to allow logging with a specific format. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Logger.#ctor(System.String,System.Boolean)">
            <summary>
            The string constructor. The string determines the name.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.FormatException"></exception>
            <param name="name">The name of the value.</param>
            <param name="showId">Determines whether to show the unique identifier when logging.</param>
        </member>
        <member name="M:KeepCoding.Logger.#ctor(System.Type,System.Boolean)">
            <summary>
            The type constructor. The type's name determines the name.
            </summary>
            <param name="type">The name of the value, using <see cref="P:System.Reflection.MemberInfo.Name"/>.</param>
            <param name="showId">Determines whether to show the unique identifier when logging.</param>
        </member>
        <member name="P:KeepCoding.Logger.Id">
            <value>
            The unique identifier of the current name.
            </value>
        </member>
        <member name="P:KeepCoding.Logger.Name">
            <value>
            The name of the logger.
            </value>
        </member>
        <member name="M:KeepCoding.Logger.Dump(System.Object,System.Boolean)">
            <summary>
            Dumps all information that it can find of the type using reflection. This should only be used to debug.
            </summary>
            <param name="obj">The object to reflect on.</param>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
        </member>
        <member name="M:KeepCoding.Logger.Dump(System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCoding.Logger.Dump(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCoding.Logger.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.Logger.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.Logger.LogMultiple(System.String[])">
            <summary>
            Logs multiple entries to the console.
            </summary>
            <param name="logs">The array of logs to individual output into the console.</param>
        </member>
        <member name="M:KeepCoding.Logger.Equals(System.Object)">
            <summary>
            Determines if both objects are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>Whether both objects are equal.</returns>
        </member>
        <member name="M:KeepCoding.Logger.GetHashCode">
            <summary>
            Gets the hash code of the object.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:KeepCoding.ModInfo">
            <summary>
            Contains information about the mod's info, this class can be used to deserialize every mod's "modInfo.json".
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Author">
            <value>
            Contains the author of the mod.
            </value>
        </member>
        <member name="P:KeepCoding.ModInfo.Description">
            <value>
            Contains the description of the mod.
            </value>
        </member>
        <member name="P:KeepCoding.ModInfo.Id">
            <value>
            Contains the ID of the mod, not to be mistaken with <see cref="P:KeepCoding.ModuleScript.Id"/>.
            </value>
        </member>
        <member name="P:KeepCoding.ModInfo.Title">
            <value>
            Contains the title of the mod.
            </value>
        </member>
        <member name="P:KeepCoding.ModInfo.UnityVersion">
            <summary>
            Contains the current unity version of the mod.
            </summary>
        </member>
        <member name="P:KeepCoding.ModInfo.Version">
            <value>
            Contains the current version of the mod.
            </value>
        </member>
        <member name="P:KeepCoding.ModInfo.Values">
            <value>
            Returns the current values of this <see cref="T:KeepCoding.ModInfo"/> as a dictionary, where the key is the variable name and the value is the variable value.
            </value>
        </member>
        <member name="M:KeepCoding.ModInfo.Equals(System.Object)">
            <summary>
            Determines if both objects are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if both of them are <see cref="T:KeepCoding.ModInfo"/> and contain the same <see cref="P:KeepCoding.ModInfo.Values"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModInfo.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.ModInfo.ToString">
            <summary>
            Converts the object to a string.
            </summary>
            <returns><see cref="P:KeepCoding.ModInfo.Values"/> unwrapped with <see cref="M:KeepCoding.Helper.UnwrapToString``1(``0,System.Boolean,System.String)"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModInfo.Deserialize(System.String)">
            <summary>
            Deserializes a modInfo.json file.
            </summary>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.PathTooLongException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.UnauthorizedAccessException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.NullReferenceException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
            <param name="path">The path of the file to deserialize.</param>
            <returns><paramref name="path"/> deserialized as <see cref="T:KeepCoding.ModInfo"/>.</returns>
        </member>
        <member name="T:KeepCoding.ModuleContainer">
            <summary>
            Container for both solvable and needy modules. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(KMBombModule,KMNeedyModule)">
            <summary>
            Encapsulates either a solvable or needy module.
            </summary>
            <exception cref="T:KeepCoding.ConstructorArgumentException"></exception>
            <param name="solvable">The instance of a normal module.</param>
            <param name="needy">The instance of a needy module.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.#ctor(UnityEngine.Component)">
            <summary>
            Encapsulates either a solvable or needy module. Uses <see cref="M:UnityEngine.Component.GetComponent``1"/>.
            </summary>
            <param name="component">The component to get the modules from.</param>
        </member>
        <member name="P:KeepCoding.ModuleContainer.RequiresTimerVisibility">
            <value>
            Set to true to only allow this module to be placed on the same face as the timer. Useful when the rules involve the timer in some way (like the Big Button), but should be used sparingly as it limits generation possibilities.
            </value>
            <exception cref="T:KeepCoding.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Name">
            <value>
            The nice display name shown to players. e.g. "The Button"
            </value>
            <exception cref="T:KeepCoding.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Id">
            <value>
            The identifier for the module as referenced in missions. e.g. "BigButton" Also known as a "Module ID".
            </value>
            <exception cref="T:KeepCoding.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Solve">
            <value>
            Call this when the entire module has been solved.
            </value>
            <exception cref="T:KeepCoding.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Strike">
            <value>
            Call this on any mistake that you want to cause a bomb strike.
            </value>
            <exception cref="T:KeepCoding.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.RuleGeneration">
            <value>
            Returns the random seed used to generate the rules for this game. Not currently used.
            </value>
            <exception cref="T:KeepCoding.UnrecognizedTypeException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Solvable">
            <value>
            Returns <see cref="T:KMBombModule"/>, or if null, throws a <see cref="T:System.NullReferenceException"/>.
            </value>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Needy">
            <value>
            Returns <see cref="T:KMNeedyModule"/>, or if null, throws a <see cref="T:System.NullReferenceException"/>.
            </value>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleContainer.Module">
            <value>
            Returns <see cref="T:KMBombModule"/>, or if null, <see cref="T:KMNeedyModule"/>.
            </value>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Implicit(KMBombModule)~KeepCoding.ModuleContainer">
            <summary>
            Creates a new instance of <see cref="T:KeepCoding.ModuleContainer"/> where <see cref="P:KeepCoding.ModuleContainer.Solvable"/> is defined.
            </summary>
            <param name="solvable">The solvable module to create a new <see cref="T:KeepCoding.ModuleContainer"/> of.</param>
            <returns>A <see cref="T:KeepCoding.ModuleContainer"/> with parameter <paramref name="solvable"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Implicit(KMNeedyModule)~KeepCoding.ModuleContainer">
            <summary>
            Creates a new instance of <see cref="T:KeepCoding.ModuleContainer"/> where <see cref="P:KeepCoding.ModuleContainer.Needy"/> is defined.
            </summary>
            <param name="needy">The needy module to create a new <see cref="T:KeepCoding.ModuleContainer"/> of.</param>
            <returns>A <see cref="T:KeepCoding.ModuleContainer"/> with parameter <paramref name="needy"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Explicit(KeepCoding.ModuleContainer)~KMBombModule">
            <summary>
            Returns the instance of <see cref="T:KMBombModule"/> from <see cref="P:KeepCoding.ModuleContainer.Solvable"/>.
            </summary>
            <param name="container">The <see cref="T:KeepCoding.ModuleContainer"/> to get the <see cref="T:KMBombModule"/> from.</param>
            <returns>A <see cref="T:KMBombModule"/> from <see cref="P:KeepCoding.ModuleContainer.Solvable"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.op_Explicit(KeepCoding.ModuleContainer)~KMNeedyModule">
            <summary>
            Returns the instance of <see cref="T:KMNeedyModule"/> from <see cref="P:KeepCoding.ModuleContainer.Needy"/>.
            </summary>
            <param name="container">The <see cref="T:KeepCoding.ModuleContainer"/> to get the <see cref="T:KMNeedyModule"/> from.</param>
            <returns>A <see cref="T:KMBombModule"/> from <see cref="P:KeepCoding.ModuleContainer.Needy"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Assign(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events to a module container, replacing their values.
            </summary>
            <param name="onActivate">Called when the lights turn on.</param>
            <param name="onNeedyActivation">Called when the needy activates.</param>
            <param name="onNeedyDeactivation">Called when the needy deactivates.</param>
            <param name="onPass">Called when the needy is solved.</param>
            <param name="onStrike">Called when the needy strikes.</param>
            <param name="onTimerExpired">Called when the timer runs out of time.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.OnActivate(System.Action)">
            <summary>
            Sets the action of OnActivate.
            </summary>
            <param name="action">The delegate to set.</param>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Equals(System.Object)">
            <summary>
            Determines if both <see cref="T:KeepCoding.ModuleContainer"/> variables are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if both contain the same instance of <see cref="T:KMBombModule"/>, <c>null</c>, <see cref="T:KMNeedyModule"/></returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.Equals(KeepCoding.ModuleContainer)">
            <summary>
            Determines if both <see cref="T:KeepCoding.ModuleContainer"/> variables are equal.
            </summary>
            <param name="other">The comparison.</param>
            <returns>True if both contain the same instance of <see cref="T:KMBombModule"/>, <c>null</c>, <see cref="T:KMNeedyModule"/></returns>
        </member>
        <member name="M:KeepCoding.ModuleContainer.GetHashCode">
            <summary>
            Gets the current hash code.
            </summary>
            <returns>The <see cref="P:KeepCoding.ModuleContainer.Module"/>'s hash code.</returns>
        </member>
        <member name="T:KeepCoding.Routine">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Routine.#ctor(System.Func{System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCoding.Routine.Start(System.Boolean,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowMultiple"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine.StartOrRestart(System.Boolean,System.Boolean)">
            <summary>
            Starts a coroutine if no coroutines are running, otherwise restarts.
            </summary>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine.Restart(System.Boolean)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine.RestartAll(System.Boolean)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="T:KeepCoding.Routine`1">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Routine`1.#ctor(System.Func{`0,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCoding.Routine`1.Start(`0,System.Boolean,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowMultiple"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`1.StartOrRestart(`0,System.Boolean,System.Boolean)">
            <summary>
            Starts a coroutine if no coroutines are running, otherwise restarts.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`1.Restart(`0,System.Boolean)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`1.RestartAll(`0,System.Boolean)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t">The first argument to pass into the coroutine.</param>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="T:KeepCoding.Routine`2">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Routine`2.#ctor(System.Func{`0,`1,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCoding.Routine`2.Start(`0,`1,System.Boolean,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowMultiple"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`2.StartOrRestart(`0,`1,System.Boolean,System.Boolean)">
            <summary>
            Starts a coroutine if no coroutines are running, otherwise restarts.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`2.Restart(`0,`1,System.Boolean)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`2.RestartAll(`0,`1,System.Boolean)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="T:KeepCoding.Routine`3">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Routine`3.#ctor(System.Func{`0,`1,`2,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCoding.Routine`3.Start(`0,`1,`2,System.Boolean,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowMultiple"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`3.StartOrRestart(`0,`1,`2,System.Boolean,System.Boolean)">
            <summary>
            Starts a coroutine if no coroutines are running, otherwise restarts.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`3.Restart(`0,`1,`2,System.Boolean)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`3.RestartAll(`0,`1,`2,System.Boolean)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="T:KeepCoding.Routine`4">
            <summary>
            Advanced coroutine handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Routine`4.#ctor(System.Func{`0,`1,`2,`3,System.Collections.IEnumerator},UnityEngine.MonoBehaviour)">
            <summary>
            Creates a list of coroutines so that you can start, restart, or stop any coroutine running inside this class.
            </summary>
            <param name="enumerator">The enumerator to call when initiated.</param>
            <param name="monoBehaviour">The MonoBehaviour to reference when calling the method.</param>
        </member>
        <member name="M:KeepCoding.Routine`4.Start(`0,`1,`2,`3,System.Boolean,System.Boolean)">
            <summary>
            Starts the coroutine. Unless specified by <paramref name="allowMultiple"/>, it will not be called if this class is in the middle of running the coroutine.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`4.StartOrRestart(`0,`1,`2,`3,System.Boolean,System.Boolean)">
            <summary>
            Starts a coroutine if no coroutines are running, otherwise restarts.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <param name="allowMultiple">Determines whether it should be allowed to create another instance of the coroutine even if it's running another one.</param>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`4.Restart(`0,`1,`2,`3,System.Boolean)">
            <summary>
            Stops and restarts the first coroutine that was run.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="M:KeepCoding.Routine`4.RestartAll(`0,`1,`2,`3,System.Boolean)">
            <summary>
            Restarts all coroutines currently running.
            </summary>
            <param name="t1">The first argument to pass into the coroutine.</param>
            <param name="t2">The second argument to pass into the coroutine.</param>
            <param name="t3">The third argument to pass into the coroutine.</param>
            <param name="t4">The fourth argument to pass into the coroutine.</param>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <param name="oneByOne">If called multiple times, waits until the others are finished.</param>
        </member>
        <member name="T:KeepCoding.Sound">
            <summary>
            Class meant to encapsulate all types of sound effects <see cref="T:KMAudio"/> uses. Currently used in <see cref="T:KeepCoding.ModuleScript"/>. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Sound.#ctor(System.String)">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
        </member>
        <member name="M:KeepCoding.Sound.#ctor(UnityEngine.AudioClip)">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
        </member>
        <member name="M:KeepCoding.Sound.#ctor(KMSoundOverride.SoundEffect)">
            <summary>
            An instance of sound where <see cref="P:KeepCoding.Sound.Game"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
        </member>
        <member name="P:KeepCoding.Sound.Custom">
            <summary>
            The custom sound, written out by name.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Reference">
            <summary>
            The audio reference that is playing the sound.
            </summary>
        </member>
        <member name="P:KeepCoding.Sound.Game">
            <summary>
            The in-game sound.
            </summary>
        </member>
        <member name="M:KeepCoding.Sound.op_Implicit(System.String)~KeepCoding.Sound">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
            <returns><see cref="T:KeepCoding.Sound"/> with argument <paramref name="sound"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Implicit(UnityEngine.AudioClip)~KeepCoding.Sound">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Custom"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
            <returns><see cref="T:KeepCoding.Sound"/> with argument <paramref name="sound"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Implicit(KMSoundOverride.SoundEffect)~KeepCoding.Sound">
            <summary>
            An instance of Sound where <see cref="P:KeepCoding.Sound.Game"/> is defined.
            </summary>
            <param name="sound">The sound to insert.</param>
            <returns><see cref="T:KeepCoding.Sound"/> with argument <paramref name="sound"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Explicit(KeepCoding.Sound)~System.String">
            <summary>
            Returns <see cref="P:KeepCoding.Sound.Custom"/> for the current variable.
            </summary>
            <param name="sound">The variable to grab the property from.</param>
            <returns><paramref name="sound"/>'s <see cref="P:KeepCoding.Sound.Custom"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Explicit(KeepCoding.Sound)~System.Nullable{KMSoundOverride.SoundEffect}">
            <summary>
            Returns <see cref="P:KeepCoding.Sound.Game"/> for the current variable.
            </summary>
            <param name="sound">The variable to grab the property from.</param>
            <returns><paramref name="sound"/>'s <see cref="P:KeepCoding.Sound.Game"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.op_Explicit(KeepCoding.Sound)~KMSoundOverride.SoundEffect">
            <summary>
            Returns <see cref="P:KeepCoding.Sound.Game"/> for the current variable.
            </summary>
            <param name="sound">The variable to grab the property from.</param>
            <returns><paramref name="sound"/>'s <see cref="P:KeepCoding.Sound.Game"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.StopSound">
            <summary>
            Stops the <see cref="P:KeepCoding.Sound.Reference"/>'s sound.
            </summary>
        </member>
        <member name="M:KeepCoding.Sound.Equals(System.Object)">
            <summary>
            Determines if both <see cref="T:KeepCoding.Sound"/> variables are equal.
            </summary>
            <param name="obj">The comparison.</param>
            <returns>True if <see cref="P:KeepCoding.Sound.Custom"/>, <see cref="P:KeepCoding.Sound.Reference"/>, and <see cref="P:KeepCoding.Sound.Game"/> are equal.</returns>
        </member>
        <member name="M:KeepCoding.Sound.Equals(KeepCoding.Sound)">
            <summary>
            Determines if both <see cref="T:KeepCoding.Sound"/> variables are equal.
            </summary>
            <param name="other">The comparison.</param>
            <returns>True if <see cref="P:KeepCoding.Sound.Custom"/>, <see cref="P:KeepCoding.Sound.Reference"/>, and <see cref="P:KeepCoding.Sound.Game"/> are equal.</returns>
        </member>
        <member name="M:KeepCoding.Sound.GetHashCode">
            <summary>
            Gets the current hash code.
            </summary>
            <returns>The hash code of <see cref="P:KeepCoding.Sound.Custom"/>, <see cref="P:KeepCoding.Sound.Reference"/>, and <see cref="P:KeepCoding.Sound.Game"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.ToString">
            <summary>
            Converts the current sound to a string, returning the current sound.
            </summary>
            <returns><see cref="P:KeepCoding.Sound.Game"/>, or if null, <see cref="P:KeepCoding.Sound.Custom"/>.</returns>
        </member>
        <member name="M:KeepCoding.Sound.Method(KMAudio)">
            <summary>
            Gets the corresponding sound method matching the arguments of this instance of <see cref="T:KeepCoding.Sound"/>.
            </summary>
            <param name="audio">The instance of <see cref="T:KMAudio"/> to play from.</param>
            <returns>A method that when called, will play the sound and return the <see cref="T:KMAudio.KMAudioRef"/> instance.</returns>
        </member>
        <member name="T:KeepCoding.Tuple`1">
            <summary>
            A basic tuple data type for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Tuple`1.#ctor(`0)">
            <summary>
            Creates a singleton tuple.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
        </member>
        <member name="M:KeepCoding.Tuple`1.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCoding.Tuple`1.Item(System.Byte)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCoding.Tuple`1.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="P:KeepCoding.Tuple`1.Item1">
            <value>
            The first item of the tuple.
            </value>
        </member>
        <member name="M:KeepCoding.Tuple`1.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCoding.Tuple`1"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`1.GetHashCode">
            <summary>
            Gets the hash code of <see cref="P:KeepCoding.Tuple`1.Item1"/>.
            </summary>
            <returns>The hash code of <see cref="P:KeepCoding.Tuple`1.Item1"/>.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`1.ToString">
            <summary>
            Gets the item, and returns it as a string.
            </summary>
            <returns><see cref="P:KeepCoding.Tuple`1.Item1"/> as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`1.op_Equality(KeepCoding.Tuple{`0},KeepCoding.Tuple{`0})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.Item1.Item1"/> and <paramref name="tupleB.Item1.Item1"/> are equal.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`1.op_Inequality(KeepCoding.Tuple{`0},KeepCoding.Tuple{`0})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.Item1.Item1"/> and <paramref name="tupleB.Item1.Item1"/> are not equal.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`1.Destruct(`0@)">
            <summary>
            Destructs the tuple.
            </summary>
            <param name="item">The variable to assign the first element of the tuple.</param>
        </member>
        <member name="M:KeepCoding.Tuple`1.Equals(KeepCoding.Tuple{`0})">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="other">The <see cref="T:KeepCoding.Tuple`1"/> to compare to.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="T:KeepCoding.Tuple`2">
            <summary>
            A basic tuple data type for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Tuple`2.#ctor(`0,`1)">
            <summary>
            Creates a tuple of size 2.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
        </member>
        <member name="M:KeepCoding.Tuple`2.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCoding.Tuple`2.Item(System.Byte)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCoding.Tuple`2.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="P:KeepCoding.Tuple`2.Item2">
            <value>
            The second item of the tuple.
            </value>
        </member>
        <member name="M:KeepCoding.Tuple`2.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCoding.Tuple`2"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`2.GetHashCode">
            <summary>
            Gets the hash code of all items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`2.ToString">
            <summary>
            Gets all items as an array, and returns it as a string.
            </summary>
            <returns>All tuples as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`2.op_Equality(KeepCoding.Tuple{`0,`1},KeepCoding.Tuple{`0,`1})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are equal in sequence.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`2.op_Inequality(KeepCoding.Tuple{`0,`1},KeepCoding.Tuple{`0,`1})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are not equal in sequence.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`2.Destruct(`0@,`1@)">
            <summary>
            Destructs the tuple.
            </summary>
            <param name="item1">The variable to assign the first element of the tuple.</param>
            <param name="item2">The variable to assign the second element of the tuple.</param>
        </member>
        <member name="M:KeepCoding.Tuple`2.Equals(KeepCoding.Tuple{`0,`1})">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="other">The <see cref="T:KeepCoding.Tuple`2"/> to compare to.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="T:KeepCoding.Tuple`3">
            <summary>
            A basic tuple data type for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a tuple of size 3.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
            <param name="item3">The item to pass into the third property.</param>
        </member>
        <member name="M:KeepCoding.Tuple`3.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCoding.Tuple`3.Item(System.Byte)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCoding.Tuple`3.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="P:KeepCoding.Tuple`3.Item3">
            <value>
            The third item of the tuple.
            </value>
        </member>
        <member name="M:KeepCoding.Tuple`3.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCoding.Tuple`3"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`3.GetHashCode">
            <summary>
            Gets the hash code of all items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`3.ToString">
            <summary>
            Gets all items as an array, and returns it as a string.
            </summary>
            <returns>All tuples as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`3.op_Equality(KeepCoding.Tuple{`0,`1,`2},KeepCoding.Tuple{`0,`1,`2})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are equal in sequence.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`3.op_Inequality(KeepCoding.Tuple{`0,`1,`2},KeepCoding.Tuple{`0,`1,`2})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are not equal in sequence.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`3.Destruct(`0@,`1@,`2@)">
            <summary>
            Destructs the tuple.
            </summary>
            <param name="item1">The variable to assign the first element of the tuple.</param>
            <param name="item2">The variable to assign the second element of the tuple.</param>
            <param name="item3">The variable to assign the third element of the tuple.</param>
        </member>
        <member name="M:KeepCoding.Tuple`3.Equals(KeepCoding.Tuple{`0,`1,`2})">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="other">The <see cref="T:KeepCoding.Tuple`3"/> to compare to.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="T:KeepCoding.Tuple`4">
            <summary>
            A basic tuple data type for C# 4. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Creates a tuple of size 4.
            </summary>
            <param name="item1">The item to pass into the first property.</param>
            <param name="item2">The item to pass into the second property.</param>
            <param name="item3">The item to pass into the third property.</param>
            <param name="item4">The item to pass into the fourth property.</param>
        </member>
        <member name="M:KeepCoding.Tuple`4.#ctor">
            <summary>
            Creates a singleton tuple of default values.
            </summary>
        </member>
        <member name="P:KeepCoding.Tuple`4.Item(System.Byte)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <param name="i">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCoding.Tuple`4.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="P:KeepCoding.Tuple`4.Item4">
            <value>
            The fourth item of the tuple.
            </value>
        </member>
        <member name="M:KeepCoding.Tuple`4.Equals(System.Object)">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="obj">The <see cref="T:KeepCoding.Tuple`4"/> as <see cref="T:System.Object"/>.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`4.GetHashCode">
            <summary>
            Gets the hash code of all items.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`4.ToString">
            <summary>
            Gets all items as an array, and returns it as a string.
            </summary>
            <returns>All tuples as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`4.op_Equality(KeepCoding.Tuple{`0,`1,`2,`3},KeepCoding.Tuple{`0,`1,`2,`3})">
            <summary>
            Evaluates whether the item in the tuple is the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are equal in sequence.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`4.op_Inequality(KeepCoding.Tuple{`0,`1,`2,`3},KeepCoding.Tuple{`0,`1,`2,`3})">
            <summary>
            Evaluates whether the item in the tuple is not the same.
            </summary>
            <param name="tupleA">The left-hand side comparison.</param>
            <param name="tupleB">The right-hand side comparison.</param>
            <returns>True if <paramref name="tupleA.ToArray.ToArray"/> and all of <paramref name="tupleB.ToArray.ToArray"/> are not equal in sequence.</returns>
        </member>
        <member name="M:KeepCoding.Tuple`4.Destruct(`0@,`1@,`2@,`3@)">
            <summary>
            Destructs the tuple.
            </summary>
            <param name="item1">The variable to assign the first element of the tuple.</param>
            <param name="item2">The variable to assign the second element of the tuple.</param>
            <param name="item3">The variable to assign the third element of the tuple.</param>
            <param name="item4">The variable to assign the fourth element of the tuple.</param>
        </member>
        <member name="M:KeepCoding.Tuple`4.Equals(KeepCoding.Tuple{`0,`1,`2,`3})">
            <summary>
            Determines whether the tuple is equal.
            </summary>
            <param name="other">The <see cref="T:KeepCoding.Tuple`4"/> to compare to.</param>
            <returns>True if itself and the parameter are equal.</returns>
        </member>
        <member name="T:KeepCoding.Work">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Work.#ctor(System.Action,System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="M:KeepCoding.Work.Start">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCoding.Work`1">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Work`1.#ctor(System.Func{`0},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="P:KeepCoding.Work`1.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="M:KeepCoding.Work`1.Start">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCoding.Work`2">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Work`2.#ctor(System.Func{`0,`1},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="P:KeepCoding.Work`2.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="M:KeepCoding.Work`2.Start(`0)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCoding.Work`3">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Work`3.#ctor(System.Func{`0,`1,`2},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="P:KeepCoding.Work`3.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="M:KeepCoding.Work`3.Start(`0,`1)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCoding.Work`4">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Work`4.#ctor(System.Func{`0,`1,`2,`3},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="P:KeepCoding.Work`4.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="M:KeepCoding.Work`4.Start(`0,`1,`2)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCoding.Work`5">
            <summary>
            Advanced multi-threading handler. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.Work`5.#ctor(System.Func{`0,`1,`2,`3,`4},System.Boolean,System.UInt32)">
            <summary>
            Stores the method so that it can later be called when a new thread starts.
            </summary>
            <param name="work">The method to call when thread starts.</param>
            <param name="allowSimultaneousActive">Whether it should allow multiple of itself to be running at once.</param>
            <param name="maximumThreadsActive">The amount of threads this class, and all of its overloads can run at once.</param>
        </member>
        <member name="P:KeepCoding.Work`5.Result">
            <value>
            The returned value of the thread.
            </value>
        </member>
        <member name="M:KeepCoding.Work`5.Start(`0,`1,`2,`3)">
            <summary>
            Starts a new thread, and waits until it is finished before halting.
            </summary>
            <returns><see cref="T:UnityEngine.WaitWhile"/> in various places until the thread has been finished.</returns>
        </member>
        <member name="T:KeepCoding.IDump">
            <summary>
            An interface to implement dump methods. Make each method return the same method in your <see cref="T:KeepCoding.Logger"/> instance. Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.IDump.Dump(System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCoding.IDump.Dump(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="T:KeepCoding.ILog">
            <summary>
            An interface to implement log methods. Make each method return the same method in your <see cref="T:KeepCoding.Logger"/> instance.  Written by Emik.
            </summary>
        </member>
        <member name="M:KeepCoding.ILog.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.ILog.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.ILog.LogMultiple(System.String[])">
            <summary>
            Logs multiple entries to the console.
            </summary>
            <param name="logs">The array of logs to individual output into the console.</param>
        </member>
        <member name="T:KeepCoding.ITP">
            <summary>
            Interface for Twitch Plays support. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.ITP.IsTimeSkippable">
            <value>
            Determines if it should allow for the timer to be skipped when the module it is in, as well as any other modules that would like to skip time, are the only unsolved modules left on the bomb. 
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsCancelCommand">
            <value>
            Determines if it should cancel command processing. If this returns true, then stop processing the command, clean up, then do a <c>yield return Cancelled;</c> to acknowledge the cancel.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsTime">
            <value>
            Determines if it is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsTP">
            <value>
            Determines if Twitch Plays is currently active. This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.IsZen">
            <value>
            Determines if the timer is counting up instead of down, for special cases, such as controlling how to sort button release times, or whether there is a low timer event or not.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.ITP.Help">
            <value>
            The help message that gets sent when typing <c>!{id} help</c>.
            </value>
        </member>
        <member name="P:KeepCoding.ITP.Manual">
            <value>
            Specifies the manual that is looked up on The Manual Repository when <c>!{id} manual</c> is entered into chat.
            </value>
        </member>
        <member name="P:KeepCoding.ITP.Abandons">
            <value>
            Declaring this field allows for Twitch Plays to inform the module that the bomb is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="M:KeepCoding.ITP.ProcessTwitchCommand(System.String)">
            <summary>
            When a command is typed into Twitch Plays with the Id of this module, it calls this method and passes in the exact command typed.
            </summary>
            <remarks>
            Anything that gets yield returned will be processed by Twitch Plays. This includes other <see cref="T:System.Collections.IEnumerable"/> methods, <see cref="T:KMSelectable"/>, an <see cref="T:System.Array"/> of <see cref="T:KMSelectable"/>, <see cref="T:System.String"/>, <c>true</c>, or <c>null</c>.
            </remarks>
            <param name="command">The user's command.</param>
            <returns>A series of instructions for the Twitch Plays mod to handle as requested by the user.</returns>
        </member>
        <member name="M:KeepCoding.ITP.TwitchHandleForcedSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="T:KeepCoding.ITuple">
            <summary>
            Interface for tuple type. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.ITuple.Item(System.Byte)">
            <summary>
            Indexable tuple. Be careful when using this as the compiler will not notice if you are using the wrong type.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <param name="index">The index to use.</param>
            <returns>The item indexed into.</returns>
        </member>
        <member name="P:KeepCoding.ITuple.IsEmpty">
            <value>
            Determines if the tuple data type is empty.
            </value>
        </member>
        <member name="P:KeepCoding.ITuple.Length">
            <value>
            Gets the length of the tuple, describing the amount of elements there are.
            </value>
        </member>
        <member name="P:KeepCoding.ITuple.UpperBound">
            <value>
            Gets the upper bound of the tuple, which is the last index.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:KeepCoding.ITuple.ToArray">
            <value>
            All of the tuple's items as an array, ordered by item number.
            </value>
        </member>
        <member name="T:KeepCoding.AudioScript">
            <summary>
            Advanced audio handler. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.AudioScript.IsMuted">
            <value>
            Determines if the <see cref="P:KeepCoding.AudioScript.AudioSource"/> is muted.
            </value>
        </member>
        <member name="P:KeepCoding.AudioScript.IsPlaying">
            <value>
            Determines if the audio source is currently playing.
            </value>
        </member>
        <member name="P:KeepCoding.AudioScript.Game">
            <value>
            The current volume of the game. Ranges 0 to 100. In the Editor this value will always return 100.
            </value>
        </member>
        <member name="P:KeepCoding.AudioScript.Relative">
            <value>
            The volume the <see cref="P:KeepCoding.AudioScript.AudioSource"/> is playing at, determined by <see cref="P:KeepCoding.AudioScript.Volume"/> and <see cref="P:KeepCoding.AudioScript.Game"/>.
            </value>
        </member>
        <member name="P:KeepCoding.AudioScript.Volume">
            <value>
            The volume of the sound relative to the game.
            </value>
        </member>
        <member name="P:KeepCoding.AudioScript.AudioSource">
            <value>
            The audio source property. If the field it is referencing is <see langword="null"/> then it adds a component.
            </value>
        </member>
        <member name="F:KeepCoding.AudioScript._isSFX">
            <summary>
            Setting this value to true will make the volume relative to <see cref="P:KeepCoding.Game.PlayerSettings.MusicVolume"/>, and <see cref="P:KeepCoding.Game.PlayerSettings.SFXVolume"/> otherwise.
            </summary>
        </member>
        <member name="F:KeepCoding.AudioScript._audioClips">
            <summary>
            The <see cref="T:System.Array"/> of clips it can play from.
            </summary>
        </member>
        <member name="F:KeepCoding.AudioScript._audioSource">
            <summary>
            The audio source field.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.op_Explicit(KeepCoding.AudioScript)~UnityEngine.AudioSource">
            <summary>
            Returns the <see cref="P:KeepCoding.AudioScript.AudioSource"/>.
            </summary>
            <param name="dynamicAudio">The instance of <see cref="T:KeepCoding.AudioScript"/> to retrieve <see cref="P:KeepCoding.AudioScript.AudioSource"/> from.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Fade(System.Single,System.Single)">
            <summary>
            Fades the audio source to a specific volume from a specified duration of time linearly.
            </summary>
            <param name="volume">The volume to get to.</param>
            <param name="time">The amount of time it takes to get to <paramref name="volume"/>.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Pause">
            <summary>
            Pauses playing the clip.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.Play(UnityEngine.AudioClip,System.Boolean,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            The sound can be cancelled with this method, but multiple sounds cannot play simultaneously.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="clip">The sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="delay">The amount of delay before the sound starts.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Play(System.String,System.Boolean,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            The sound can be cancelled with this method, but multiple sounds cannot play simultaneously.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="name">The name of the sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="delay">The amount of delay before the sound starts.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.PlayStackable(UnityEngine.AudioClip,System.Boolean,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            Multiple sounds can be played simultaneously with this method, however they cannot be cancelled.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="clip">The sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="delay">The amount of delay before the sound starts.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.PlayStackable(System.String,System.Boolean,System.Byte,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Plays a sound, with optional parameters.
            </summary>
            <remarks>
            Multiple sounds can be played simultaneously with this method, however they cannot be cancelled.
            </remarks>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <param name="name">The name of the sound clip to play.</param>
            <param name="volume">The volume of the sound clip relative to the game sound.</param>
            <param name="loop">If the sound should be looped.</param>
            <param name="priority">The priority of the sound.</param>
            <param name="delay">The amount of delay before the sound starts.</param>
            <param name="time">The time in the audio it should start playing at.</param>
            <param name="pitch">The pitch of the sound.</param>
        </member>
        <member name="M:KeepCoding.AudioScript.Stop">
            <summary>
            Stops playing the clip.
            </summary>
        </member>
        <member name="M:KeepCoding.AudioScript.Unpause">
            <summary>
            Unpauses the paused playback of this <see cref="P:KeepCoding.AudioScript.AudioSource"/>.
            </summary>
        </member>
        <member name="T:KeepCoding.ModuleScript">
            <summary>
            Base class for solvable and needy modded modules in Keep Talking and Nobody Explodes. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.HasStruck">
            <value>
            Determines whether the module has been struck. Twitch Plays script will set this to false when a command is interrupted.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsActive">
            <value>
            Determines whether the bomb is currently active, and the timer is ticking.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsEditor">
            <value>
            Determines whether the application is running from inside unity.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsLastInstantiated">
            <value>
            Determines whether this module is the last instantiated instance.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsNeedyActive">
            <value>
            Determines whether the needy is active.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsSolved">
            <value>
            Determines whether the module has been solved.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.IsVR">
            <value>
            Determines whether the game is being played in Virtual Reality. In the Editor, it always returns false.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.Id">
            <value>
            The Unique Id for the module of this type.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.LastId">
            <summary>
            The last Id instantiation for the module of this type.
            </summary>
        </member>
        <member name="P:KeepCoding.ModuleScript.TimeLeft">
            <value>
            The amount of time left on the bomb, in seconds, rounded down.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.Version">
            <value>
            The version number of the entire mod.
            </value>
            <exception cref="T:System.OperationCanceledException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="P:KeepCoding.ModuleScript.TP">
            <value>
            Gets the Twitch Plays <see cref="T:UnityEngine.Component"/> attached to this <see cref="T:UnityEngine.GameObject"/>.
            </value>
            <remarks>
            Due to type ambiguity, a non-generic interface is returned.
            </remarks>
        </member>
        <member name="P:KeepCoding.ModuleScript.Bomb">
            <value>
            The bomb that this module is in.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.Module">
            <value>
            Contains either <see cref="T:KMBombModule"/> or <see cref="T:KMNeedyModule"/>, and allows for running commands through context.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.Sounds">
            <value>
            Contains an instance for every <see cref="T:KeepCoding.Sound"/> played by this module using <see cref="M:KeepCoding.ModuleScript.PlaySound(UnityEngine.Transform,System.Boolean,KeepCoding.Sound[])"/> or any of its overloads.
            </value>
        </member>
        <member name="P:KeepCoding.ModuleScript.Modules">
            <summary>
            Contains every modded module in <see cref="P:KeepCoding.ModuleScript.Bomb"/>, separated by type.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.Awake">
            <summary>
            This initalizes the module. If you have an Awake method, be sure to call <c>base.Awake()</c> as the first statement.
            </summary>
            <exception cref="T:System.FormatException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnDestroy">
            <summary>
            This removed the exception catcher. If you have an OnDestroy method, be sure to call <c>base.OnDestroy()</c> as the first statement.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.Assign(System.Action,System.Action,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Assigns events specified into <see cref="P:KeepCoding.ModuleScript.Module"/>. Reassigning them will replace their values.
            </summary>
            <remarks>
            An event that is null will be skipped. This extension method simplifies all of the KMFramework events into Actions or Functions.
            </remarks>
            <param name="onActivate">Called when the lights turn on.</param>
            <param name="onNeedyActivation">Called when the needy activates.</param>
            <param name="onNeedyDeactivation">Called when the needy deactivates.</param>
            <param name="onPass">Called when the needy is solved.</param>
            <param name="onStrike">Called when the needy strikes.</param>
            <param name="onTimerExpired">Called when the timer runs out of time.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.ButtonEffect(KMSelectable,System.Single,KeepCoding.Sound[])">
            <summary>
            Handles typical button <see cref="F:KMSelectable.OnInteract"/> behaviour.
            </summary>
            <exception cref="T:UnityEngine.UnassignedReferenceException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="selectable">The selectable, which is used as a source for sound and bomb shake.</param>
            <param name="intensityModifier">The intensity of the bomb shaking.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Dump(System.Boolean,System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="getVariables">Whether it should search recursively for the elements within the elements.</param>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Dump(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
            Dumps all information about the variables specified. Each element uses the syntax () => varName. This should only be used to debug.
            </summary>
            <param name="logs">All of the variables to throughly log.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Log``1(``0,UnityEngine.LogType)">
            <summary>
            Logs message, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="logType">The type of logging. Different logging types have different icons within the editor.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Log``1(``0,System.Object[])">
            <summary>
            Logs multiple entries, but formats it to be compliant with the Logfile Analyzer.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="message">The message to log.</param>
            <param name="args">All of the arguments to embed into <paramref name="message"/>.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.LogMultiple(System.String[])">
            <summary>
            Logs multiple entries to the console.
            </summary>
            <param name="logs">The array of logs to individual output into the console.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Solve(System.String[])">
            <summary>
            Solves the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.Strike(System.String[])">
            <summary>
            Strikes the module, and logs all of the parameters.
            </summary>
            <param name="logs">All of the entries to log.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnActivate">
            <summary>
            Called when the lights turn on.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnModuleStrike(System.String)">
            <summary>
            Called when any module on the current bomb has issued a strike.
            </summary>
            <remarks>
            Vanilla modules are an exception, they will not invoke this method.
            </remarks>
            <param name="moduleName">The sender's module name, which caused a strike.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnNeedySolved(System.String)">
            <summary>
            Called when any <see cref="T:KMNeedyModule"/> on the current bomb has been solved.
            </summary>
            <remarks>
            Vanilla modules are an exception, they will not invoke this method.
            </remarks>
            <param name="moduleName">The sender's module name, which was solved.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnSolvableSolved(System.String)">
            <summary>
            Called when any <see cref="T:KMBombModule"/> on the current bomb has been solved.
            </summary>
            <remarks>
            Vanilla modules are an exception, they will not invoke this method.
            </remarks>
            <param name="moduleName">The sender's module name, which was solved.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.OnTimerTick">
            <summary>
            Called when the timer's seconds-digit changes.
            </summary>
        </member>
        <member name="M:KeepCoding.ModuleScript.Write``1(System.String,``0)">
            <summary>
            Sends information to a static variable such that other modules can access it.
            </summary>
            <remarks>
            To ensure that this method works correctly, make sure that both modules have the same version of KeepCoding.
            </remarks>
            <typeparam name="T">The type of the expected input.</typeparam>
            <param name="key">The key of the variable, a lot like a variable name.</param>
            <param name="value">The value to store in the key.</param>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(UnityEngine.Transform,System.Boolean,KeepCoding.Sound[])">
            <summary>
            Plays a sound. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="transform">The location or sound source of the sound.</param>
            <param name="loop">Whether all sounds listed should loop or not.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(UnityEngine.Transform,KeepCoding.Sound[])">
            <summary>
            Plays a sound. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="transform">The location or sound source of the sound.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(System.Boolean,KeepCoding.Sound[])">
            <summary>
            Plays a sound, the sound source is the game object it is attached to. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="loop">Whether all sounds listed should loop or not.</param>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.PlaySound(KeepCoding.Sound[])">
            <summary>
            Plays a sound, the sound source is the game object it is attached to. Requires <see cref="T:KMAudio"/> to be assigned.
            </summary>
            <exception cref="T:KeepCoding.UnrecognizedValueException"></exception>
            <param name="sounds">The sounds, these can either be <see cref="T:System.String"/>, <see cref="T:UnityEngine.AudioClip"/>, or <see cref="T:KMSoundOverride.SoundEffect"/>.</param>
            <returns>A <see cref="T:KMAudio.KMAudioRef"/> for each argument you provide.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.Get``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.Component.GetComponent``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <remarks>
            Use this in-place of public fields that refer to itself.
            </remarks>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.Cache``1(System.Func{``0[]},System.Boolean)">
            <summary>
            Caches the result of a function call that returns a component array in a dictionary, and will return the cached result if called again. Use this to alleviate expensive function calls.
            </summary>
            <remarks>
            <see cref="M:UnityEngine.GameObject.GetComponent``1"/> and <see cref="M:UnityEngine.GameObject.GetComponents``1"/> have their own implementations already, so use these functions instead for that purpose; 
            <seealso cref="M:KeepCoding.ModuleScript.Get``1(System.Boolean)"/>, <seealso cref="M:KeepCoding.ModuleScript.GetAll``1(System.Boolean)"/>
            </remarks>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="func">The expensive function to call, only if it hasn't ever been called by this method on the current instance before.</param>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The components specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.GetAll``1(System.Boolean)">
            <summary>
            Similar to <see cref="M:UnityEngine.GameObject.GetComponents``1"/>, however it caches the result in a dictionary, and will return the cached result if called again.
            </summary>
            <remarks>
            Use this in-place of public fields that refer to itself.
            </remarks>
            <exception cref="T:UnityEngine.MissingComponentException"></exception>
            <typeparam name="T">The type of component to search for.</typeparam>
            <param name="allowNull">Whether it should throw an exception if it sees null, if not it will return the default value. (Likely null)</param>
            <returns>The component specified by <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:KeepCoding.ModuleScript.Read``1(System.String,System.String,System.Boolean)">
            <summary>
            Allows you to read a module's data that uses <see cref="M:KeepCoding.ModuleScript.Write``1(System.String,``0)"/>, even from a different assembly.
            </summary>
            <remarks>
            To ensure that this method works correctly, make sure that both modules have the same version of KeepCoding.
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:KeepCoding.WrongDatatypeException"></exception>
            <typeparam name="T">The type of the expected output.</typeparam>
            <param name="module">The module to look into.</param>
            <param name="key">The key of the variable, a lot like a variable name.</param>
            <param name="allowDefault">Whether it should throw an exception if no value is found, or provide the default value instead.</param>
            <returns>Every instance of the value from the every instance of the module specified.</returns>
        </member>
        <member name="T:KeepCoding.TPScript`1">
            <summary>
            Base class for TwitchPlays support for solvable and needy modded modules in Keep Talking and Nobody Explodes. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsTimeSkippable">
            <value>
            Determines if it should allow for the timer to be skipped when the module it is in, as well as any other modules that would like to skip time, are the only unsolved modules left on the bomb. 
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsCancelCommand">
            <value>
            Determines if it should cancel command processing. If this returns true, then stop processing the command, clean up, then do a <c>yield return Cancelled;</c> to acknowledge the cancel.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsTime">
            <value>
            Determines if it is in Time Mode, where solves change the timer. This is useful for modules that use the timer's value.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsTP">
            <value>
            Determines if Twitch Plays is currently active. This is for modules that need to display different items, or use different rules if Twitch Plays is active.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.IsZen">
            <value>
            Determines if the timer is counting up instead of down, for special cases, such as controlling how to sort button release times, or whether there is a low timer event or not.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.Help">
            <value>
            The help message that gets sent when typing <c>!{id} help</c>.
            </value>
        </member>
        <member name="P:KeepCoding.TPScript`1.Manual">
            <value>
            Specifies the manual that is looked up on The Manual Repository when <c>!{id} manual</c> is entered into chat.
            </value>
        </member>
        <member name="P:KeepCoding.TPScript`1.Abandons">
            <value>
            This list contains modules that it should stop processing. Currently, the only module that uses this capability is Souvenir.
            </value>
            <remarks>
            These values are set by the Twitch Plays mod using reflection. This field is set in <c>Start()</c>, therefore there's no guarantee that it'll be available there, the field must be first accessed in a delegate in <see cref="F:KMBombModule.OnActivate"/> or <see cref="F:KMNeedyModule.OnActivate"/> or later.
            </remarks>
        </member>
        <member name="P:KeepCoding.TPScript`1.Module">
            <value>
            The instance of the module.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.Strike">
            <value>
            Yield return this to indicate that this command will cause a strike at some later point; all this does is tell Twitch Plays to attribute the strike to the author of this command.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.Solve">
            <value>
            Yield return this to indicate that this command will solve the module at some later point; all this does is tell Twitch Plays to attribute the solve to the author of this command.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.UnsubmittablePenalty">
            <value>
            Yield return this to indicate that the command couldn't submit an answer and should only be used to prevent users from guessing the answer. This should not be used if an answer could never be submittable for a module.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.TryCancelSequence">
            <value>
            Yield return this to indicate that the <c>KMSelectable[]</c> sequence that follows this command should be cancelled if a "!cancel" or "!stop" is issued mid-way through that sequence.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.Cancelled">
            <value>
            Yield return this to indicate that you have stopped processing the command in response to the <see cref="F:KeepCoding.TPScript`1.TwitchShouldCancelCommand"/> bool being set to true.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.MultipleStrikes">
            <value>
            Yield return this to indicate that the issued command is going to cause more than one strike, so should disable the internal strike tracker in order to avoid flooding the chat with "VoteNay Module {id} got a strike! +1 strike to {Nickname}" for as many strikes as will be awarded. This also disables the internal solve tracker as well. This allows for sending additional messages or continue processing commands regardless of the solve/strike state.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.EndMultipleStrikes">
            <value>
            Yield return this to indicate that the strike tracker should be enabled. If any strikes were issued during the time it was disabled, they will be awarded and the routine stopped at that point, otherwise, it will just cancel the "VoteNay Module {id} got 0 strikes! +0 strike to {Nickname}" message that would otherwise be posted. Likewise, if the module was solved at the time this command is issued, the processing will be stopped as of that point as well.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.AutoSolve">
            <value>
            Yield return this to indicate automatically solving the module, as if it threw an exception while solving.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.CancelDetonate">
            <value>
            Yield return this to indicate cancelling a previously issued delayed detonation command on the same module.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.WaitingMusic">
            <value>
            Yield return this to indicate playing the waiting music if a command will take long to finish.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.EndWaitingMusic">
            <value>
            Yield return this to indicate stopping the waiting music mid-command.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.ToggleWaitingMusic">
            <value>
            Yield return this to toggle the waiting music on and off mid-command.
            </value>
        </member>
        <member name="F:KeepCoding.TPScript`1.HideCamera">
            <value>
            Yield return this to hide the heads-up display and cameras while doing quaternion rotations, if it is expected that the camera/hud will get in the way.
            </value>
        </member>
        <member name="M:KeepCoding.TPScript`1.ProcessTwitchCommand(System.String)">
            <summary>
            When a command is typed into Twitch Plays with the Id of this module, it calls this method and passes in the exact command typed.
            </summary>
            <remarks>
            Anything that gets yield returned will be processed by Twitch Plays. This includes other <see cref="T:System.Collections.IEnumerable"/> methods, <see cref="T:KMSelectable"/>, an <see cref="T:System.Array"/> of <see cref="T:KMSelectable"/>, <see cref="T:System.String"/>, <c>true</c>, or <c>null</c>.
            </remarks>
            <param name="command">The user's command.</param>
            <returns>A series of instructions for the Twitch Plays mod to handle as requested by the user.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.TwitchHandleForcedSolve">
            <summary>
            When the module runs into an exception or the module is forced to be solved, it calls this method.
            </summary>
            <remarks>
            Make sure that the module is solved before this method closes, otherwise it causes a forced-solve.
            </remarks>
            <returns>A series of instructions for the Twitch Plays mod to handle in order to guarantee a solve.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.IsMatch(System.String,System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Determines whether the input string matches the regex of the pattern.
            </summary>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="input">The test string.</param>
            <param name="pattern">The regular expression.</param>
            <param name="lenient">Whether it should add the default <c>^\s* PATTERN \s*$</c> embeded into most regex usages for Twitch Plays.</param>
            <param name="options">Any additional options for regular expressions.</param>
            <returns>True if <paramref name="input"/> passes the test of the <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.StrikeMessage(System.String)">
            <summary>
            Yield return this to allow you to tell the user why they got a strike if it isn't clear.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.TryCancel(System.String)">
            <summary>
            Yield return this to indicate that this command is allowed to be cancelled at the given time of the yield. Just know that you won't be able to clean up if you do your cancel this way, and there is a pending !cancel or !stop.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.TryWaitCancel(System.Single,System.String)">
            <summary>
            Yield return this to cause Twitch Plays to wait for the given time, and any time during the entire duration, the command may cancel. Like "trycancel", you won't be able to clean up if you cancel this way. Also like "trycancel", <paramref name="message"/> is optional.
            </summary>
            <param name="time">The amount of time to wait.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SendToChat(System.String)">
            <summary>
            Yield return this to send a chat directly to twitch chat.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SendToChatError(System.String)">
            <summary>
            Yield return this to send a message to the chat about why a users' command was invalid.
            </summary>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SendDelayedMessage(System.Single,System.String)">
            <summary>
            Yield return this to send a message to chat after <paramref name="time"/> seconds.
            </summary>
            <param name="time">The amount of time to wait before the message gets sent.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.Detonate(System.Nullable{System.Single},System.String)">
            <summary>
            Yield return this to explode the bomb instantly. <paramref name="time"/> is specified in number of seconds before the bomb explodes. (Note, sending another detonate command will auto-cancel the previous one on the same module if it hasn't happened already.). <paramref name="message"/> is the message to send to chat upon detonation. Both of the parameters are optional.
            </summary>
            <param name="time">The amount of time before the bomb blows up.</param>
            <param name="message">The message to send.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.SkipTime(System.String)">
            <summary>
            Yield return this to try advancing the clock to the specified time. You must put the full time you wish to skip to, and this time either needs to be less than the current time, if in normal/time mode, or greater than the current time, if in zen mode. Example, if you wanted to set the clock to 5:24, then you do "skiptime 324" or "skiptime 5:24". You can target partway through the seconds, such as "skiptime 45.28", which would then set the clock to 45.28, provided that time has NOT gone by already. You must also set <see cref="P:KeepCoding.TPScript`1.IsTimeSkippable"/> to true, for this function to work.
            </summary>
            <param name="seconds">The time to skip to in seconds.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.AwardPoints(System.Int32)">
            <summary>
            Yield return this to award the user that sent the command points directly, this is currently used for mods like Souvenir to give points to users that answered the questions equally.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.AwardPointsOnSolve(System.Int32)">
            <summary>
            Yield return this to award the last user that sent the command points when the module is solved. The module must prevent any user from sending commands afterward in order for Twitch Plays to award points to the correct user. This is currently used by the Twin module when extra points must be given but the module is not solved immediately.
            </summary>
            <param name="points">The amount of points to award. Negatives supported.</param>
            <returns>A formatted string for Twitch Plays.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.Evaluate``1(System.Boolean,``0,System.Object)">
            <summary>
            Works as a ternary operator. Returns <paramref name="then"/> if <paramref name="condition"/> is true, otherwise <paramref name="otherwise"/>.
            </summary>
            <remarks>
            You can yield return this to send error messages or interactions by first checking for the condition.
            </remarks>
            <typeparam name="T">The type of then condition.</typeparam>
            <param name="condition">The boolean to check.</param>
            <param name="then">The output to return if <paramref name="condition"/> is true.</param>
            <param name="otherwise">The output to return if <paramref name="condition"/> is false.</param>
            <returns><paramref name="then"/> or <paramref name="otherwise"/>, depending on <paramref name="condition"/>.</returns>
        </member>
        <member name="M:KeepCoding.TPScript`1.OnInteractSequence(KMSelectable[],System.Single,System.Int32[])">
            <summary>
            Presses a sequence of buttons according to <paramref name="indices"/> within <paramref name="selectables"/>, waiting <paramref name="wait"/> seconds in-between each, and interrupting as soon as <see cref="P:KeepCoding.ModuleScript.HasStruck"/> is true.
            </summary>
            <param name="selectables">The array of selectables to interact with.</param>
            <param name="indices">The indices to press within the array.</param>
            <param name="wait">The delay between each button press in seconds.</param>
            <returns>A sequence of button presses for Twitch Plays to process.</returns>
        </member>
        <member name="T:KeepCoding.Game">
            <summary>
            Allows access into the game's internal code. Written by Emik.
            </summary>
            <remarks>
            On the Editor, these properties will return default values. Check the XML documentation to see the value it returns.
            </remarks>
        </member>
        <member name="T:KeepCoding.Game.ControlType">
            <summary>
            Determines how the game is controlled.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Gamepad">
            <value>
            The game is being controlled with a gamepad controller.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Gaze">
            <value>
            The game is being controlled with a virtual reality headset.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Mouse">
            <value>
            The game is being controlled with a mouse.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Motion">
            <value>
            The game is being controlled with virtual reality headset and controller.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ControlType.Touch">
            <value>
            The game is being controlled with touch controls.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ControlType.ThreeDOF">
            <value>
            The game is being controlled with three degrees of freedom, part of virtual reality.
            </value>
        </member>
        <member name="T:KeepCoding.Game.ModSourceEnum">
            <summary>
            Determines how the mod is stored.
            </summary>
        </member>
        <member name="F:KeepCoding.Game.ModSourceEnum.Invalid">
            <value>
            The mod is invalid.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ModSourceEnum.Local">
            <value>
            The mod is stored within the local mods folder.
            </value>
        </member>
        <member name="F:KeepCoding.Game.ModSourceEnum.SteamWorkshop">
            <value>
            The mod is stored within the workshop folder.
            </value>
        </member>
        <member name="T:KeepCoding.Game.KTInputManager">
            <summary>
            Allows access relating to how the game is being interacted with.
            </summary>
        </member>
        <member name="P:KeepCoding.Game.KTInputManager.IsCurrentControlTypeVR">
            <value>
            Determines if the current way the game is being controlled is VR-related.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.KTInputManager.CurrentControlType">
            <value>
            The current way the game is being controlled.
            </value>
            <remarks>
            Default: <see cref="F:KeepCoding.Game.ControlType.Mouse"/>.
            </remarks>
        </member>
        <member name="T:KeepCoding.Game.Mission">
            <summary>
            Allows access relating to the current mission.
            </summary>
        </member>
        <member name="P:KeepCoding.Game.Mission.IsPacingEvents">
            <value>
            Determines whether or not all pacing events are enabled. Default: <see langword="false"/>.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Mission.Description">
            <value>
            The description as it appears in the bomb binder.
            </value>
            <remarks>
            Default: "Everybody has to start somewhere. Let's just hope it doesn't end here too.\n\nMake sure your experts have the manual and are ready to help.".
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Mission.DisplayName">
            <value>
            The mission name as it appears in the bomb binder.
            </value>
            <remarks>
            Default: "The First Bomb"
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Mission.ID">
            <value>
            The ID of the mission.
            </value>
            <remarks>
            Default: "firsttime"
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Mission.GeneratorSetting">
            <value>
            Gets the generator setting of the mission.
            </value>
            <remarks>
            New instance of <see cref="P:KeepCoding.Game.Mission.GeneratorSetting"/>, default constructor.
            </remarks>
        </member>
        <member name="T:KeepCoding.Game.ModManager">
            <summary>
            Allows access to methods relating mod paths.
            </summary>
        </member>
        <member name="P:KeepCoding.Game.ModManager.GetDisabledModPaths">
            <value>
            Gets all of the disabled mod paths.
            </value>
            <remarks>
            New instance of <see cref="T:System.Collections.Generic.List`1"/>, with no elements.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.ModManager.GetAllModPathsFromSource">
            <value>
            Gets all of the mod paths within the <see cref="T:KeepCoding.Game.ModSourceEnum"/> constraint.
            </value>
            <remarks>
            New instance of <see cref="T:System.Collections.Generic.List`1"/>, with no elements.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.ModManager.GetEnabledModPaths">
            <value>
            Gets all of the enabled mod paths within the <see cref="T:KeepCoding.Game.ModSourceEnum"/> constraint.
            </value>
            <remarks>
            New instance of <see cref="T:System.Collections.Generic.List`1"/>, with no elements.
            </remarks>
        </member>
        <member name="T:KeepCoding.Game.PlayerSettings">
            <summary>
            Allows access into the player settings from the game. Do not use this class in the unity editor. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.InvertTiltControls">
            <value>
            Determines if vertical tilting is flipped or not.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.LockMouseToWindow">
            <value>
            Determines if the option to lock the mouse to the window is enabled.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.ShowLeaderBoards">
            <value>
            Determines if the option to show the leaderboards from the pamphlet.
            </value>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.ShowRotationUI">
            <value>
            Determines if the option to show the rotation of the User Interface is enabled.
            </value>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.ShowScanline">
            <value>
            Determines if the option to show scanlines is enabled.
            </value>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.SkipTitleScreen">
            <value>
            Determines if the option to skip the title screen is enabled.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.RumbleEnabled">
            <value>
            Determines if the VR or regular controllers vibrate.
            </value>
            <remarks>
            Default: <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.TouchpadInvert">
            <value>
            Determines if the touchpad controls are inverted.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.UseModsAlways">
            <value>
            Determines if the option to always use mods is enabled.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.UseParallelModLoading">
            <value>
            Determines if the option to use parallel/simultaneous mod loading is enabled.
            </value>
            <remarks>
            Default: <see langword="false"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.VRModeRequested">
            <value>
            Determines if VR mode is requested.
            </value>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.AntiAliasing">
            <value>
            The intensity of anti-aliasing currently on the game. Ranges 0 to 8.
            </value>
            <remarks>
            Default: 8.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.MusicVolume">
            <value>
            The current music volume from the dossier menu. Ranges 0 to 100.
            </value>
            <remarks>
            Default: 100.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.SFXVolume">
            <value>
            The current sound effects volume from the dosssier menu. Ranges 0 to 100.
            </value>
            <remarks>
            Default: 100.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.VSync">
            <value>
            Determines if VSync is on or off.
            </value>
            <remarks>
            Default: 1.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.PlayerSettings.LanguageCode">
            <value>
            The current language code.
            </value>
            <remarks>
            Default: "en".
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.AddStrikes">
            <value>
            Adds an amount of strikes on the bomb.
            </value>
            <remarks>
            Default: Internal Logger method call.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.SetStrikes">
            <value>
            Sets an amount of strikes on the bomb.
            </value>
            <remarks>
            Default: Internal Logger method call.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Bomb">
            <value>
            Gets the game's internal bomb component, not to be mistaken with <see cref="T:KMBomb"/>. To prevent a reference to the game, the type is boxed in <see cref="T:System.Object"/>. You can cast it to Bomb or <see cref="T:UnityEngine.MonoBehaviour"/> type to restore its functionality.
            </value>
            <remarks>
            Default: <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Timer">
            <value>
            Gets the game's internal timer component. To prevent a reference to the game, the type is boxed in <see cref="T:System.Object"/>. You can cast it to TimerComponent or <see cref="T:UnityEngine.MonoBehaviour"/> type to restore its functionality.
            </value>
            <remarks>
            Default: <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:KeepCoding.Game.Vanillas">
            <value>
            Gets all of the vanilla modules from the bomb supplied, including needies. To prevent a reference to the game, the type is boxed in an <see cref="T:System.Object"/> <see cref="T:System.Array"/>. You can cast it to BombComponent type to restore its functionality.
            </value>
            <remarks>
            Default: An empty <see cref="T:System.Object"/> <see cref="T:System.Array"/>.
            </remarks>
        </member>
        <member name="T:KeepCoding.PathManager">
            <summary>
            Allows loading external information stored on the module. Written by Emik.
            </summary>
        </member>
        <member name="P:KeepCoding.PathManager.AssemblyName">
            <value>
            Gets this library's <see cref="P:KeepCoding.PathManager.AssemblyName"/>.
            </value>
        </member>
        <member name="P:KeepCoding.PathManager.Version">
            <value>
            Gets this library's version number. Currently used by <see cref="T:KeepCoding.ModuleScript"/> to log the version number of this library.
            </value>
            <remarks>
            If you want the version number of your modules, refer to <see cref="P:KeepCoding.ModuleScript.Version"/> instead, or <see cref="M:KeepCoding.PathManager.GetModInfo``1(``0)"/>.
            </remarks>
        </member>
        <member name="M:KeepCoding.PathManager.PrintHierarchy(System.UInt16)">
            <summary>
            Prints a hierarchy of all game objects.
            </summary>
            <param name="indentation">The amount of spaces used for indenting children of game objects.</param>
        </member>
        <member name="M:KeepCoding.PathManager.PrintHierarchy(UnityEngine.GameObject,System.UInt16,System.UInt16)">
            <summary>
            Prints the hierarchy from the game object specified.
            </summary>
            <param name="obj">The game object to search the hierarchy.</param>
            <param name="indentation">The amount of spaces used for indenting children of game objects.</param>
            <param name="depth">The level of depth which determines level of indentation. Leave this variable as 0.</param>
        </member>
        <member name="M:KeepCoding.PathManager.CombineMultiple(System.String[])">
            <summary>
            Combines multiple paths together.
            </summary>
            <param name="paths">The paths to combine with.</param>
            <returns>A single path consisting of the combined path of the array.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.NameOfAssembly(System.Type)">
            <summary>
            Gets the assembly's directory where the type <paramref name="type"/> exists.
            </summary>
            <param name="type">The type to get the assembly directory of.</param>
            <returns>The path to the directory of the assembly where the type <paramref name="type"/> comes from.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.NameOfAssembly``1">
            <summary>
            Gets the assembly's directory where the type <typeparamref name="T"/> exists.
            </summary>
            <typeparam name="T">The type to get the assembly directory of.</typeparam>
            <returns>The path to the directory of the assembly where the type <typeparamref name="T"/> comes from.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetModInfo(System.String)">
            <summary>
            Gets the path and deserializes the modInfo.json located at every mod's root folder.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="bundleFileName">The name of the bundle assembly.</param>
            <returns>A <see cref="T:KeepCoding.ModInfo"/> of the mod info json file located in the mod.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetModInfo(System.Type)">
            <summary>
            Gets the path and deserializes the modInfo.json located at every mod's root folder.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <param name="type">Any data from the assembly, which is used to get the name.</param>
            <returns>A <see cref="T:KeepCoding.ModInfo"/> of the mod info json file located in the mod.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetModInfo``1(``0)">
            <summary>
            Gets the path and deserializes the modInfo.json located at every mod's root folder.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <typeparam name="T">The type to get the assembly from, which is used to get the name.</typeparam>
            <param name="_">Any data from the assembly, which is used to get the name.</param>
            <returns>A <see cref="T:KeepCoding.ModInfo"/> of the mod info json file located in the mod.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetPath(System.String)">
            <summary>
            Finds the path of a given file within each mod.
            </summary>
            <remarks>
            You need to specify the extensions of the file too, otherwise the file cannot be found.
            </remarks>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="search">The file to search for. Make sure to include extensions!</param>
            <returns>The path to <paramref name="search"/>.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetPath(System.Type)">
            <summary>
            Finds the path of the mod.
            </summary>
            <param name="type">Any data from the assembly, which is used to get the name.</param>
            <returns>The path to the mod.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetPath``1(``0)">
            <summary>
            Finds the path of the mod.
            </summary>
            <typeparam name="T">The type to get the assembly from, which is used to get the name.</typeparam>
            <param name="_">Any data from the assembly, which is used to get the name.</param>
            <returns>The path to the mod.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.LoadLibrary(System.String,System.String)">
            <summary>
            Loads a library by searching for the bundle. Do not run this on the Editor.
            </summary>
            <remarks>
            If the library has already been loaded, then this method will prematurely halt.
            </remarks>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="bundleFileName">The name of the bundle file.</param>
            <param name="libraryFileName">The library's name, excluding the extension.</param>
        </member>
        <member name="M:KeepCoding.PathManager.LoadLibrary(System.Type,System.String)">
            <summary>
            Loads a library by searching for the bundle. Do not run this on the Editor.
            </summary>
            <remarks>
            If the library has already been loaded, then this method will prematurely halt.
            </remarks>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="type">Any data from the assembly, which is used to get the name.</param>
            <param name="libraryFileName">The library's name, excluding the extension.</param>
        </member>
        <member name="M:KeepCoding.PathManager.LoadLibrary``1(``0,System.String)">
            <summary>
            Loads a library by searching for the bundle. Do not run this on the Editor.
            </summary>
            <remarks>
            If the library has already been loaded, then this method will prematurely halt.
            </remarks>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The type to get the assembly from, which is used to get the name.</typeparam>
            <param name="_">Any data from the assembly, which is used to get the name.</param>
            <param name="libraryFileName">The library's name, excluding the extension.</param>
        </member>
        <member name="M:KeepCoding.PathManager.GetAssets``1(System.String,System.String)">
            <summary>
            Retrieves assets of a specific type from a different bundle file.
            </summary>
            <typeparam name="TAsset">The type of asset to retrieve.</typeparam>
            <param name="bundleFileName">The name of the bundle file.</param>
            <param name="bundleAssetFileName">The name of the bundle file to grab the assets from.</param>
            <returns>The assets retrieved from the file.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetAssets``1(System.Type,System.String)">
            <summary>
            Retrieves assets of a specific type from a different bundle file.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <param name="type">Any data from the assembly, which is used to get the name.</param>
            <param name="bundleVideoFileName">The name of the bundle that contains videos.</param>
            <returns>The <see cref="T:UnityEngine.AssetBundleCreateRequest"/> needed to load the files, followed by the <see cref="T:UnityEngine.Video.VideoClip"/> <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:KeepCoding.PathManager.GetAssets``2(``0,System.String)">
            <summary>
            Retrieves assets of a specific type from a different bundle file.
            </summary>
            <exception cref="T:KeepCoding.EmptyIteratorException"></exception>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
            <exception cref="T:KeepCoding.NullIteratorException"></exception>
            <typeparam name="T">The type to get the assembly from, which is used to get the name.</typeparam>
            <typeparam name="TAsset">The type of asset to return.</typeparam>
            <param name="_">Any data from the assembly, which is used to get the name.</param>
            <param name="bundleVideoFileName">The name of the bundle that contains videos.</param>
            <returns>The <see cref="T:UnityEngine.AssetBundleCreateRequest"/> needed to load the files, followed by the <see cref="T:UnityEngine.Video.VideoClip"/> <see cref="T:System.Array"/>.</returns>
        </member>
    </members>
</doc>
